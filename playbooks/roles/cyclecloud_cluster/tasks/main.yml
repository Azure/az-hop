---

- name: Drop project files if they exists
  file:
    path: '{{project_root}}'
    state: absent

- name: Create common project dir
  file:
    path: '{{project_root}}'
    state: directory

- name: Create common CycleCloud project
  command: '/usr/local/bin/cyclecloud project init common'
  args:
    chdir: '{{project_root}}'
    creates: '{{common_project_root}}/project.ini'

- name: Copy common cluster-init files
  copy:
    src: '{{role_path}}/projects/common/cluster-init'
    dest: '{{common_project_root}}/specs/default/'

- name: Copy mountnfs file
  template:
    src: '{{role_path}}/projects/common/cluster-init/scripts/1-mountnfs.sh.j2'
    dest: '{{common_project_root}}/specs/default/cluster-init/scripts/1-mountnfs.sh'
    mode: 0777

- name: Add lustre script
  template:
    src: '{{role_path}}/projects/common/cluster-init/scripts/2-mountlustre.sh.j2'
    dest: '{{common_project_root}}/specs/default/cluster-init/scripts/2-mountlustre.sh'
    mode: 0777
  when: ( lustre.create | default(false) )

- name: Add Linux joindomain script
  template:
    src: '{{role_path}}/projects/common/cluster-init/scripts/3-joindomain.sh.j2'
    dest: '{{common_project_root}}/specs/default/cluster-init/scripts/3-joindomain.sh'
    mode: 0777

- name: Add Windows joindomain script
  template:
    src: '{{role_path}}/projects/common/cluster-init/scripts/3-joindomain.bat.j2'
    dest: '{{common_project_root}}/specs/default/cluster-init/scripts/3-joindomain.bat'
    mode: 0777

- name: Add default script
  template:
    src: '{{role_path}}/projects/common/cluster-init/scripts/5-default.sh.j2'
    dest: '{{common_project_root}}/specs/default/cluster-init/scripts/5-default.sh'
    mode: 0777

- name: Add telegraf configuration file
  template:
    src: '{{role_path}}/projects/common/cluster-init/files/telegraf.conf.j2'
    dest: '{{common_project_root}}/specs/default/cluster-init/files/telegraf.conf'
    mode: 0600

- name: Add nhc configuration file
  template:
    src: '{{role_path}}/projects/common/cluster-init/files/nhc/nhc_common.conf.j2'
    dest: '{{common_project_root}}/specs/default/cluster-init/files/nhc/nhc_common.conf'

- name: Remove Jinja files
  file:
    path: '{{item}}'
    state: absent
  with_items:
    - '{{common_project_root}}/specs/default/cluster-init/files/telegraf.conf.j2'
    - '{{common_project_root}}/specs/default/cluster-init/files/nhc/nhc_common.conf.j2'
    - '{{common_project_root}}/specs/default/cluster-init/scripts/1-mountnfs.sh.j2'
    - '{{common_project_root}}/specs/default/cluster-init/scripts/2-mountlustre.sh.j2'
    - '{{common_project_root}}/specs/default/cluster-init/scripts/3-joindomain.sh.j2'
    - '{{common_project_root}}/specs/default/cluster-init/scripts/3-joindomain.bat.j2'
    - '{{common_project_root}}/specs/default/cluster-init/scripts/5-default.sh.j2'

- name: Remove CVMFS if not enabled
  file:
    path: '{{common_project_root}}/specs/default/cluster-init/scripts/7-cvmfs-eessi.sh'
    state: absent
  when: cvmfs_eessi_enabled == false

- name: Upload common CycleCloud project
  command: '/usr/local/bin/cyclecloud project upload'
  args:
    chdir: '{{common_project_root}}'

- name: OpenPBS Cycle Cloud project
  block:
    - name: Create Open PBS CycleCloud project
      command: '/usr/local/bin/cyclecloud project init openpbs'
      args:
        chdir: '{{project_root}}'
        creates: '{{openpbs_project_root}}/project.ini'

    - name: Copy OpenPBS cluster-init files
      copy:
        src: '{{role_path}}/projects/openpbs/cluster-init'
        dest: '{{openpbs_project_root}}/specs/default/'

    - name: Upload OpenPBS CycleCloud project
      command: '/usr/local/bin/cyclecloud project upload'
      args:
        chdir: '{{openpbs_project_root}}'

    - name: Add azhop-OpenPBS template
      template:
        src: 'azhop-OpenPBS.txt.j2'
        dest: '{{project_root}}/azhop-OpenPBS.txt'

    - name: Import OpenPBS Cluster
      command: '/usr/local/bin/cyclecloud import_cluster pbs1 -f {{project_root}}/azhop-OpenPBS.txt -c azhop-OpenPBS --force'

    - name: Start OpenPBS Cluster
      command: '/usr/local/bin/cyclecloud start_cluster pbs1'
  when: cc_queue_manager == "openpbs"

- name: CryoSPARC CycleCloud project
  block:
    - name: Read CryoSPARC admin password from KV
      command: az keyvault secret show --vault-name {{key_vault}} -n {{database_user}}-password --query "value" -o tsv
      delegate_to: localhost
      connection: local
      register: cryosparc_admin_pwd
      become: false

    - name: Create cryosparc project
      command: '/usr/local/bin/cyclecloud project init cryosparc'
      args:
        chdir: '{{project_root}}'
        creates: '{{cryosparc_project_root}}/project.ini'

    - name: Create setup_data_disk.sh, download_cryosparc.sh, install_cryosparc.sh
      template:
        src: '{{role_path}}/projects/cryosparc/cluster-init/scripts/{{ item }}.j2'
        dest: '{{cryosparc_project_root}}/specs/default/cluster-init/scripts/{{ item }}'
        mode: 0777
      with_items:
        - 01-setup_data_disk.sh
        - 02-download_cryosparc.sh
        - 03-install_cryosparc.sh

    - name: Create import_slurm_cluster.sh
      template:
        src: '{{role_path}}/projects/cryosparc/cluster-init/scripts/04-import_slurm_cluster.sh.j2'
        dest: '{{cryosparc_project_root}}/specs/default/cluster-init/scripts/04-import_slurm_cluster.sh'
        mode: 0777
      when: cc_queue_manager == "slurm"

    - name: Copy CryoSPARC Slurm cluster definition files
      copy:
        src: '{{role_path}}/projects/cryosparc/cluster-init/files/slurm_{{ item }}'
        dest: '{{cryosparc_project_root}}/specs/default/cluster-init/files/{{ item }}'
      with_items:
        - cluster_info.json
        - cluster_script.sh
      when: cc_queue_manager == "slurm"

    - name: Upload cryosparc CycleCloud project
      command: '/usr/local/bin/cyclecloud project upload'
      args:
        chdir: '{{cryosparc_project_root}}'
  when: cryosparc_enabled == true

- name: SLURM template and optional Enroot project
  block:
    - name: Add azhop-Slurm template
      template:
        src: 'azhop-slurm.txt.j2'
        dest: '{{project_root}}/azhop-slurm.txt'

    - name: Import Slurm Cluster
      command: '/usr/local/bin/cyclecloud import_cluster slurm1 -f {{project_root}}/azhop-slurm.txt -c azhop-slurm --force'

    - name: Start Slurm Cluster
      command: '/usr/local/bin/cyclecloud start_cluster slurm1'
  when: cc_queue_manager == "slurm"

- name: Populate cluster-init for enroot/pyxis
  block:
    - name: Create enroot project
      command: '/usr/local/bin/cyclecloud project init enroot'
      args:
        chdir: '{{project_root}}'
        creates: '{{enroot_project_root}}/project.ini'

    - name: Create install_pyxis.sh
      template:
        src: '{{role_path}}/projects/enroot/cluster-init/scripts/1-install_pyxis.sh.j2'
        dest: '{{enroot_project_root}}/specs/default/cluster-init/scripts/1-install_pyxis.sh'
        mode: 0777
      when: cc_queue_manager == "slurm"

    - name: Create install_enroot.sh
      template:
        src: '{{role_path}}/projects/enroot/cluster-init/scripts/2-install_enroot.sh.j2'
        dest: '{{enroot_project_root}}/specs/default/cluster-init/scripts/2-install_enroot.sh'
        mode: 0777

    - name: Create 3-pmix.sh
      template:
        src: '{{role_path}}/projects/enroot/cluster-init/scripts/3-pmix.sh.j2'
        dest: '{{enroot_project_root}}/specs/default/cluster-init/scripts/3-pmix.sh'
        mode: 0777
      when: cc_queue_manager == "slurm"

    - name: Upload enroot CycleCloud project
      command: '/usr/local/bin/cyclecloud project upload'
      args:
        chdir: '{{enroot_project_root}}'
  when: enroot_enabled == true

- name: Remote Visualization Cycle Cloud project
  block:
    - name: Add azhop-remoteviz template
      template:
        src: 'azhop-remoteviz.txt.j2'
        dest: '{{project_root}}/azhop-remoteviz.txt'

    - name: Import remoteviz Cluster
      command: '/usr/local/bin/cyclecloud import_cluster remoteviz -f {{project_root}}/azhop-remoteviz.txt -c azhop-remoteviz --force'

    - name: Start remoteviz Cluster
      command: '/usr/local/bin/cyclecloud start_cluster remoteviz'
  when: cc_enable_remote_winviz == true
