# This looks crazy but in order for this playbook to run from a pipeline, the jumpbox dummy need to be added
- name: jumpbox dummy
  hosts: jumpbox
  become: true

- hosts: ondemand
  gather_facts: no
  become: true
  vars_files:
    - '{{global_config_file}}'

  tasks:
  - name: Wait 300 seconds for the nodes to be ready
    wait_for_connection:
      timeout: 300
  - name: Gather facts for first time
    setup:

  - name: Make sure we have the latest root certificates
    yum:
      name: ca-certificates
      state: latest
  - name: Set up PAM authentication
    shell: |
      yum install -y mod_authnz_pam
      mkdir -p /opt/rh/httpd24/root/usr/lib64/httpd/modules/
      cp /usr/lib64/httpd/modules/mod_authnz_pam.so /opt/rh/httpd24/root/usr/lib64/httpd/modules/
      mkdir -p /opt/rh/httpd24/root/etc/httpd/conf.modules.d
      echo "LoadModule authnz_pam_module modules/mod_authnz_pam.so" > /opt/rh/httpd24/root/etc/httpd/conf.modules.d/55-authnz_pam.conf
      cp /etc/pam.d/sshd /etc/pam.d/ood
      chmod 640 /etc/shadow
      chgrp apache /etc/shadow
    args:
      creates: /etc/pam.d/ood

  - name: Retrieve OIDC secret
    block:
      - name: Read oidc secret from KV
        command: az keyvault secret show --vault-name {{key_vault}} -n {{authentication.ood_auth_openidc.OIDCClientID}}-password --query "value" -o tsv
        delegate_to: localhost
        connection: local
        register: oidc_secret
        become: false
    when: (authentication.httpd_auth is defined) and 
          (authentication.httpd_auth == 'oidc')

  - name: Check if we need to register HTTPS
    stat:
      path: /etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt
    register: sslcert

  - name: Run the ood-ansible role to get certificate
    include_role:
      name: ood-ansible
    vars:
      servername: null
      oidc_client_secret: '{{ oidc_secret.stdout | default(None)}}'
      httpd_port: 80
      httpd_public_uri: /.well-known
      httpd_public_root: /var/www/ood/.well-known
    when: sslcert.stat.exists == False

  #
  # Block to generate a certificate when using a public IP
  #
  - name: Generate Let's Encrypt Certificate
    block:
      - name: Generate HTTPS certificate
        shell: |
          cd /root

          # get ssl
          curl --silent https://raw.githubusercontent.com/srvrco/getssl/master/getssl > getssl
          chmod 700 getssl

          # Generate the certificate
          ./getssl -c {{ ondemand_fqdn }}
          cat <<EOF > ${HOME}/.getssl/{{ ondemand_fqdn }}/getssl.cfg 
          CA="https://acme-v02.api.letsencrypt.org"
          SANS=""
          ACL=('/var/www/ood/.well-known/acme-challenge')
          EOF
          ./getssl {{ ondemand_fqdn }} 2>&1 | tee getssl-{{ ondemand_fqdn }}.log

          # set the certificate
          mkdir /etc/ssl/{{ ondemand_fqdn }}
          cp /root/.getssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt /etc/ssl/{{ ondemand_fqdn }}
          cp /root/.getssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.key /etc/ssl/{{ ondemand_fqdn }}
          wget https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt -O /etc/ssl/{{ ondemand_fqdn }}/letsencryptauthorityx3.pem.txt
        args:
          creates: /etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt
        when: sslcert.stat.exists == False

      - name: Run the ood-ansible role for HTTPS
        include_role:
          name: ood-ansible
        vars:
          servername: '{{ ondemand_fqdn }}'
          httpd_port: 443
          oidc_client_secret: '{{ oidc_secret.stdout | default(None)}}'
          ssl:
          - SSLCertificateFile "/etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt"
          - SSLCertificateKeyFile "/etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.key"
          - SSLCertificateChainFile "/etc/ssl/{{ ondemand_fqdn }}/letsencryptauthorityx3.pem.txt"

    when: (locked_down_network.public_ip is not defined) or 
          (locked_down_network.public_ip is defined and locked_down_network.public_ip)

  #
  # Block to use an existing certificate
  #
  - name: use an existing certificate
    block:
      # - name: Generate a Self Signed OpenSSL certificate
      #   openssl_certificate:
      #     path: '{{ ondemand_fqdn }}.crt'
      #     privatekey_path: '{{ ondemand_fqdn }}.key'
      #     provider: selfsigned
      #   delegate_to: localhost
      #   connection: local
      #   when: sslcert.stat.exists == False

      - name: copy cert files
        copy:
          src: '{{item}}'
          dest: '/etc/ssl/{{ ondemand_fqdn }}/'
        with_items:
          - '{{ ondemand_fqdn }}.crt'
          - '{{ ondemand_fqdn }}.key'
        when: sslcert.stat.exists == False

      - name: Run the ood-ansible role for HTTPS
        include_role:
          name: ood-ansible
        vars:
          servername: '{{ ondemand_fqdn }}'
          httpd_port: 443
          oidc_client_secret: '{{ oidc_secret.stdout | default(None)}}'
          ssl:
          - SSLCertificateFile "/etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt"
          - SSLCertificateKeyFile "/etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.key"

    when: (locked_down_network.public_ip is defined and not locked_down_network.public_ip)

  - name: Copy logo
    copy: 
      src: logo.png
      dest: /var/www/ood/public

  - name: Copy favicon
    copy: 
      src: favicon.ico
      dest: /var/www/ood/public

  - name: Run the pbsclient role
    include_role:
      name: pbsclient
      apply:
        become: true
    vars:
      pbs_server: scheduler
    when: (queue_manager == "openpbs" or queue_manager is not defined)

  - name: Run the munge role
    include_role:
      name: munge
      apply: 
        become: true
    when: queue_manager == "slurm"

  - name: Run the slurmclient role
    include_role:
      name: slurmclient
      apply:
        become: true
    vars:
      cc_slurm_version: 20.11.7-1
    when: (queue_manager == "slurm")

  - name: setup cyclecloud proxy
    shell: |
        if ! grep -q ccportal /opt/ood/ood-portal-generator/templates/ood-portal.conf.erb; then
          cd /root
          cat << EOF > cyclecloud_proxy
          SetEnv OOD_CC_URI "/cyclecloud"
          <Location "/cyclecloud">
            AuthType Basic
            AuthName "Open OnDemand"
            AuthBasicProvider PAM
            AuthPAMService ood
            Require valid-user

            ProxyPass http://ccportal:80/cyclecloud
            ProxyPassReverse http://ccportal:80/cyclecloud
          </Location>
        EOF
          sed -i '$e cat cyclecloud_proxy' /opt/ood/ood-portal-generator/templates/ood-portal.conf.erb
          rm cyclecloud_proxy
          /opt/ood/ood-portal-generator/sbin/update_ood_portal
          systemctl try-restart httpd24-httpd.service httpd24-htcacheclean.service
        fi

  - name: add modules for job submission
    yum: 
      name: Lmod, hwloc, numactl 

  - name: create ssh_config file
    copy:
      content: |
        Host *
          StrictHostKeyChecking=No
      dest: /etc/ssh/ssh_config

  - include_role: 
      name: ood-apps-cyclecloud
      apply: 
        become: true

  - include_role: 
      name: ood-apps-grafana
      apply: 
        become: true

  - include_role: 
      name: ood-apps-robinhood
      apply: 
        become: true

  - name: setup azcopy
    shell: |
      # Install azcopy
      cd /usr/local/bin
      wget -q https://aka.ms/downloadazcopy-v10-linux -O - | tar zxf - --strip-components 1 --wildcards '*/azcopy'
      chmod 755 /usr/local/bin/azcopy
    args:
      creates: /usr/local/bin/azcopy

  - name: Add Lustre server repo
    yum_repository:
      name: lustreserver
      description: Lustre repo
      baseurl: https://downloads.whamcloud.com/public/lustre/lustre-2.12.6/el7/patchless-ldiskfs-server/
      file: LustrePack
      enabled: yes
      gpgcheck: no

  - name: Add Lustre client repo
    yum_repository:
      name: lustreclient
      description: Lustre repo
      baseurl: https://downloads.whamcloud.com/public/lustre/lustre-2.12.6/el7/client/
      file: LustrePack
      enabled: yes
      gpgcheck: no

  - name: Add e2fs repo
    yum_repository:
      name: e2fs
      description: Lustre repo
      baseurl: https://downloads.whamcloud.com/public/e2fsprogs/latest/el7/
      file: LustrePack
      enabled: yes
      gpgcheck: no

  - name: Install lustre packages
    yum:
      name:
        - lustre-client
      state: present
    register: install_rpms

  - name: run weak-modules
    command: weak-modules --add-kernel --no-initramfs
    when: install_rpms.changed

  - name: create lustre mount directory
    file:
      path: /lustre
      state: directory
      mode: 0777
  - name: mount lustre
    mount:
      path: /lustre
      src: lustre@tcp0:/LustreFS
      opts: flock,defaults,_netdev
      state: mounted
      fstype: lustre

  - name: create ood initialiser directory
    file:
      path: /etc/ood/config/apps/dashboard/initializers
      state: directory

  - name: create ood lustre menu option
    copy:
      dest: /etc/ood/config/apps/dashboard/initializers/ood.rb
      content: |
        # /etc/ood/config/apps/dashboard/initializers/ood.rb

        OodFilesApp.candidate_favorite_paths.tap do |paths|
          paths << FavoritePath.new("/lustre", title: "Lustre")
        end

  # Update file upload staging area to be in /mnt/resource
  - name: Create passenger temp dir
    file: 
      path: /mnt/resource/passenger-tmp
      state: directory
      mode: 0777
  - name: Create tempdir initializer
    copy:
      content: |
        class Dir
          def self.tmpdir
            "/mnt/resource/passenger-tmp"
          end
        end
      dest: /var/www/ood/apps/sys/dashboard/config/initializers/tempdir.rb
  - name: Change pun_tmp_root value
    replace:
      path: /etc/ood/config/nginx_stage.yml
      regexp: '/var/tmp'
      replace: '/mnt/resource'
  - name: Uncomment pun_tmp_root
    replace:
      path: /etc/ood/config/nginx_stage.yml
      regexp: '#pun_tmp_root'
      replace: 'pun_tmp_root'

  # Disable the Uppy timeout when uploading files
  - name: Disable Uppy file upload timeout
    replace:
      path: /var/www/ood/apps/sys/dashboard/app/views/files/index.html.erb
      regexp: 'limit: 1,$'
      replace: 'limit: 1, timeout: 0,'

  - name: create cron entry to make sure the passenger-tmp folder exists
    cron:
      name: "create passenger tmp directory and set permissions"
      minute: "0,10,20,30,40,50"
      job: "test -e /mnt/resource/passenger-tmp || (mkdir /mnt/resource/passenger-tmp && chmod 777 /mnt/resource/passenger-tmp)"

  - name: restart ood
    shell: systemctl try-restart httpd24-httpd.service httpd24-htcacheclean.service
