# This looks crazy but in order for this playbook to run from a pipeline, the jumpbox dummy need to be added
- name: jumpbox dummy
  hosts: jumpbox
  become: true

- hosts: ondemand
  gather_facts: no
  become: true
  vars_files:
    - '{{global_config_file}}'
  vars:
    ondemand_version: 3.0.3
    ood_package: "{{ ('ondemand=' if ( ansible_distribution == 'Ubuntu') else 'ondemand-') }}{{ondemand_version}}"
    yq_version: v4.40.5
    yq_binary: yq_linux_amd64
    ccportal_name: "{{cyclecloud.name | default('ccportal')}}"
    web_server_path: "{{cyclecloud.web_server_path | default('/cyclecloud')}}"

  tasks:
  - name: Wait 300 seconds for the nodes to be ready
    wait_for_connection:
      timeout: 300
  - name: Gather facts for first time
    setup:

  - name: set httpd_auth values when using basic auth
    block:
      - name: set httpd_auth values when using basic auth on Alma 8
        set_fact:
          httpd_auth:
            - AuthType Basic
            - AuthName "Open OnDemand"
            - AuthBasicProvider external
            - AuthExternal pwauth
            - Require valid-user
        when:
          - ansible_distribution in ['AlmaLinux', 'Ubuntu']

      - name: set httpd_auth values when using basic auth on CentOS 7
        set_fact:
          httpd_auth:
            - AuthType Basic
            - AuthName "Open OnDemand"
            - AuthBasicProvider PAM
            - AuthPAMService ood
            - Require valid-user
        when:
          - ansible_distribution == 'CentOS'
          - ansible_distribution_major_version == '7'
    when:
      - authentication.httpd_auth is defined
      - authentication.httpd_auth == 'basic'

  - name: debug
    debug:
      msg:
        - "{{ ood_package }}" 
#        - "{{ ('ondemand*,amlfs*' if ( lustre.create | default(false)) else 'ondemand*') }}"

  - name: Make sure we have the latest root certificates
    yum:
      name: ca-certificates
      state: latest
      lock_timeout : 180
    when: 
      - (ansible_distribution == 'AlmaLinux') or (ansible_distribution == 'CentOS')

  - name: Make sure we have the latest root certificates in Ubuntu
    apt:
      name: ca-certificates
      state: latest
    when: ansible_distribution == 'Ubuntu'

  - name: Set up PAM authentication for OOD
    include_role:
      name: ood_pam_auth

  - name: Retrieve OIDC secret
    block:
      - name: Read oidc secret from KV
        command: az keyvault secret show --vault-name {{key_vault}} -n {{authentication.ood_auth_openidc.OIDCClientID}}-password --query "value" -o tsv
        delegate_to: localhost
        connection: local
        register: oidc_secret
        become: false
    when: (authentication.httpd_auth is defined) and 
          (authentication.httpd_auth == 'oidc')

  - name: Check if we need to register HTTPS
    stat:
      path: /etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt
    register: sslcert

  #
  # Block to generate a Let's Encrypt certificate when using a public IP
  #
  - name: Generate Let's Encrypt Certificate when using a public IP
    block:
      - name: Run the ood-ansible role to get certificate
        include_role:
          name: ood-ansible
        vars:
          ondemand_package: '{{ ood_package }}'
          servername: null
          oidc_client_secret: '{{ oidc_secret.stdout | default(None)}}'
          httpd_port: 80
          httpd_public_uri: /.well-known
          httpd_public_root: /var/www/ood/.well-known
        when: sslcert.stat.exists == False

      - name: disable 000-default.conf and enable ood-portal.conf in Ubuntu
        shell: |
          a2dissite 000-default.conf
          a2ensite ood-portal.conf
        when: ansible_distribution == 'Ubuntu'

      - name: activate new apache2 configuration in Ubuntu
        service:
          name: apache2
          state: reloaded
        when: ansible_distribution == 'Ubuntu'
      
      - name: Generate Let's Encrypt HTTPS certificate
        shell: |
          cd /root

          # get ssl
          curl --silent https://raw.githubusercontent.com/srvrco/getssl/master/getssl > getssl
          chmod 700 getssl

          # Generate the certificate
          ./getssl -c {{ ondemand_fqdn }}
          cat <<EOF > ${HOME}/.getssl/{{ ondemand_fqdn }}/getssl.cfg 
          CA="https://acme-v02.api.letsencrypt.org"
          SANS=""
          ACL=('/var/www/ood/.well-known/acme-challenge')
          EOF
          ./getssl {{ ondemand_fqdn }} 2>&1 | tee getssl-{{ ondemand_fqdn }}.log

          # set the certificate
          mkdir /etc/ssl/{{ ondemand_fqdn }}
          cp /root/.getssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt /etc/ssl/{{ ondemand_fqdn }}
          cp /root/.getssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.key /etc/ssl/{{ ondemand_fqdn }}
          wget https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt -O /etc/ssl/{{ ondemand_fqdn }}/letsencryptauthorityx3.pem.txt
        args:
          creates: /etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt
        when: sslcert.stat.exists == False

      - name: Set the SSLCertificateChainFile variable
        set_fact:
          SSLCertificateChainFile: SSLCertificateChainFile "/etc/ssl/{{ ondemand_fqdn }}/letsencryptauthorityx3.pem.txt"

    when: ( ondemand.generate_certificate | default(true) and 
            locked_down_network.public_ip | default(true) )

  #
  # Block to use an existing certificate
  #
  - name: use an existing certificate
    block:
      - name: copy cert files
        copy:
          src: '{{item}}'
          dest: '/etc/ssl/{{ ondemand_fqdn }}/'
        with_items:
          - '{{ ondemand_fqdn }}.crt'
          - '{{ ondemand_fqdn }}.key'
        when: sslcert.stat.exists == False

      - name: Check if a certificate chain file exists
        stat:
          path: '{{ ondemand_fqdn }}_chain.crt'
        register: sslcert_chain
        delegate_to: localhost
        connection: local
        become: false

      - name: copy chain cert files
        copy:
          src: '{{item}}'
          dest: '/etc/ssl/{{ ondemand_fqdn }}/'
        with_items:
          - '{{ ondemand_fqdn }}_chain.crt'
        when: sslcert_chain.stat.exists == True

      - name: Set the SSLCertificateChainFile variable
        set_fact:
          SSLCertificateChainFile: SSLCertificateChainFile "/etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}_chain.crt"
        when: sslcert_chain.stat.exists == True
    # When public_ip == false and generate_certificate == false
    when: not (locked_down_network.public_ip | default(true)) and
          not (ondemand.generate_certificate | default(true))

  #
  # Block to generate a self_signed certificate
  #
  - name: generate a self_signed certificate
    block:

      - name: Generate a Self Signed OpenSSL certificate
        delegate_to: localhost
        connection: local
        become: false
        shell: |
          openssl req -nodes -new -x509 -keyout {{ ondemand_fqdn }}.key -out {{ ondemand_fqdn }}.crt -subj "/CN={{ ondemand_fqdn }}"
        args:
          creates: "{{ ondemand_fqdn }}.crt"

      - name: copy cert files
        copy:
          src: '{{item}}'
          dest: '/etc/ssl/{{ ondemand_fqdn }}/'
        with_items:
          - '{{ ondemand_fqdn }}.crt'
          - '{{ ondemand_fqdn }}.key'
        when: sslcert.stat.exists == False

    # when public_ip == false and generate_certificate == true
    when: not (locked_down_network.public_ip | default(true)) and
          ondemand.generate_certificate | default(true)

  - name: Run the ood-ansible role for HTTPS
    include_role:
      name: ood-ansible
    vars:
      ondemand_package: '{{ ood_package }}'
      servername: '{{ ondemand_fqdn }}'
      httpd_port: 443
      oidc_client_secret: '{{ oidc_secret.stdout | default(None)}}'
      ssl:
      - SSLCertificateFile "/etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt"
      - SSLCertificateKeyFile "/etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.key"
      - "{{SSLCertificateChainFile | default(None)}}"
      - SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
      - SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256

  - name: activate new apache2 configuration in Ubuntu
    service:
      name: apache2
      state: reloaded
    when: ansible_distribution == 'Ubuntu'

  - name: Copy logo
    copy: 
      src: logo.png
      dest: /var/www/ood/public

  - name: Copy favicon
    copy: 
      src: favicon.ico
      dest: /var/www/ood/public

  - name: Copy Custom user mapping script
    copy: 
      src: files/custom_mapping.sh
      dest: /opt/ood/ood_auth_map/bin
      mode: 0755

  - name: Run the pbsclient role
    include_role:
      name: pbsclient
      apply:
        become: true
    vars:
      pbs_server: '{{scheduler.name | default("scheduler")}}'
    when: (queue_manager == "openpbs" or queue_manager is not defined)

  - name: Read Password from KV
    command: az keyvault secret show --vault-name {{key_vault}} -n {{admin_user}}-password --query "value" -o tsv
    delegate_to: localhost
    connection: local
    register: password
    become: false
    when: ( queue_manager is defined and queue_manager == "slurm" )

  - name: Run the slurmclient role
    include_role:
      name: slurm
      apply:
        become: true
    vars:
      slurm_role: 'slurmclient'
      cc_admin: '{{admin_user}}'
      cc_password: '{{password.stdout}}'
      cc_version: '{{cyclecloud.version | default("8.4.2-3186")}}'
      slurm_version: '{{slurm.slurm_version | default("20.11.9")}}-1'
    when: ( queue_manager is defined and queue_manager == "slurm" )

  # temporary workaround waiting for this https://github.com/OSC/ood-ansible/issues/222, now fixed in OOD 3.1
  - name: Configure pwauth for Apache
    blockinfile:
      path: /opt/ood/ood-portal-generator/templates/ood-portal.conf.erb
      insertafter: OOD_PUN_STAGE_CMD
      marker: "# {mark} ANSIBLE MANAGED BLOCK - Configure pwauth for Apache"
      block: |
          AddExternalAuth pwauth /usr/bin/pwauth
          SetExternalAuthMethod pwauth pipe
    when: 
      - authentication.httpd_auth is defined
      - authentication.httpd_auth == 'basic'
      - ansible_distribution in ['AlmaLinux']

  # temporary workaround waiting for this https://github.com/OSC/ood-ansible/issues/222, now fixed in OOD 3.1
  - name: Configure pwauth for Apache
    blockinfile:
      path: /opt/ood/ood-portal-generator/templates/ood-portal.conf.erb
      insertafter: OOD_PUN_STAGE_CMD
      marker: "# {mark} ANSIBLE MANAGED BLOCK - Configure pwauth for Apache"
      block: |
          AddExternalAuth pwauth /usr/sbin/pwauth
          SetExternalAuthMethod pwauth pipe
    when: 
      - authentication.httpd_auth is defined
      - authentication.httpd_auth == 'basic'
      - ansible_distribution in ['Ubuntu']
      
  - name: setup cyclecloud proxy
    blockinfile:
      path: /opt/ood/ood-portal-generator/templates/ood-portal.conf.erb
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK - setup cyclecloud proxy"
      block: |
          SetEnv OOD_CC_URI "{{web_server_path}}"
          <Location "{{web_server_path}}">
            {% for auth in httpd_auth  %}
            {{ auth }}
            {% endfor %}

            ProxyPass http://{{ccportal_name}}:80{{web_server_path}}
            ProxyPassReverse http://{{ccportal_name}}:80{{web_server_path}}
          </Location>
  
  - name: Configure Lmod
    block:
      - name: enable powertools
        command: dnf config-manager --enable powertools
    when: 
      - ansible_distribution == 'AlmaLinux'
      - ansible_distribution_major_version == '8'

  - name: add modules for job submission
    yum: 
      name: Lmod, hwloc, numactl, jq
      lock_timeout : 180
    when: (ansible_distribution == 'AlmaLinux') or (ansible_distribution == 'CentOS')

  - name: add modules for job submission
    apt: 
      name: lmod, hwloc, numactl, jq
    when: ansible_distribution == 'Ubuntu'

  - name: create ssh_config file
    copy:
      content: |
        Host *
          StrictHostKeyChecking=No
      dest: /etc/ssh/ssh_config

  - name: Insert/Update Match group "azhop-users" configuration block in /etc/ssh/sshd_config
    blockinfile:
      path: /etc/ssh/sshd_config
      block: |
        Match group "{{ (usergroups | selectattr('gid', 'eq', 5000) | map(attribute='name'))[0] | default('azhop-users', true) }}"
          AllowUsers *

  - name: setup azcopy
    shell: |
      # Install azcopy
      cd /usr/local/bin
      wget -q https://aka.ms/downloadazcopy-v10-linux -O - | tar zxf - --strip-components 1 --wildcards '*/azcopy'
      chmod 755 /usr/local/bin/azcopy
    args:
      creates: /usr/local/bin/azcopy

  - name: create lustre mount directory
    file:
      path: /lustre
      state: directory
      mode: 0777
    when: ( lustre.create | default(false) )

  - name: Install Lustre Client
    include_role:
      name: lustre
    vars:
      install_client: true
    when: ( lustre.create | default(false) )

  - name: create ood initialiser directory
    file:
      path: /etc/ood/config/apps/dashboard/initializers
      state: directory

  - name: Create "{{mounts[item].mountpoint}}" directory mountpoint
    file:
      path: '{{mounts[item].mountpoint}}'
      state: directory
      mode: '0755'
    loop: "{{mounts | list}}"
    when: item != 'home'

  - name: Mount "{{ mounts[item].server }}:/{{ mounts[item].export }}"
    mount:
      src: '{{ mounts[item].server }}:/{{ mounts[item].export }}'
      path: '{{mounts[item].mountpoint}}'
      opts: '{{ mounts[item].options | default("rw,hard,rsize=262144,wsize=262144,vers=3,tcp",true) }}'
      state: mounted
      fstype: nfs
    loop: "{{mounts | list}}"
    when: item != 'home'

# https://osc.github.io/ood-documentation/latest/customizations.html#add-shortcuts-to-files-menu
  - name: Copy the file menu initializer
    template:
      src: 'ood.rb.j2'
      dest: '/etc/ood/config/apps/dashboard/initializers/ood.rb'

  # Update file upload staging area to be in /mnt/resource
  - name: Create passenger temp dir
    file: 
      path: /mnt/resource/passenger-tmp
      state: directory
      mode: 0777
  - name: Create tempdir initializer
    copy:
      content: |
        class Dir
          def self.tmpdir
            "/mnt/resource/passenger-tmp"
          end
        end
      dest: /var/www/ood/apps/sys/dashboard/config/initializers/tempdir.rb
  - name: Change pun_tmp_root value
    replace:
      path: /etc/ood/config/nginx_stage.yml
      regexp: '/var/tmp'
      replace: '/mnt/resource'
  - name: Uncomment pun_tmp_root
    replace:
      path: /etc/ood/config/nginx_stage.yml
      regexp: '#pun_tmp_root'
      replace: 'pun_tmp_root'

  # Disable the Uppy timeout when uploading files
  - name: Disable Uppy file upload timeout
    replace:
      path: /var/www/ood/apps/sys/dashboard/app/views/files/index.html.erb
      regexp: 'limit: 1,$'
      replace: 'limit: 1, timeout: 0,'

  - name: Enable file extension restriction in Uppy
    lineinfile:
      path: /var/www/ood/apps/sys/dashboard/app/views/files/index.html.erb
      regex: 'allowedFileTypes'
      state: 'present'
      insertafter: 'restrictions:'
      line: '      allowedFileTypes: {{ ondemand.file_upload_allowed_extensions | default("[]") }},'
    when: (ondemand.file_upload_allowed_extensions is defined)

  - name: create cron entry to make sure the passenger-tmp folder exists
    cron:
      name: "create passenger tmp directory and set permissions"
      minute: "0,10,20,30,40,50"
      job: "test -e /mnt/resource/passenger-tmp || (mkdir /mnt/resource/passenger-tmp && chmod 777 /mnt/resource/passenger-tmp)"

  # Fix websocket issue https://discourse.openondemand.org/t/novnc-failed-to-connect-to-server-ondemand-3-0-1/2711/23
  # Not needed if GUI node is using websockify 0.10.0+
  # - name: fix websocket attach protocols for OOD 3.0.1
  #   shell: |
  #     sed -i "s|uri, protocols));|uri, ['binary','base64']));|g" /var/www/ood/apps/sys/dashboard/public/noVNC-1.3.0/core/websock.js

  - name: Enable Apache mpm_event_module
    shell: |
      sed -i "s/^LoadModule mpm_prefork_module/#LoadModule mpm_prefork_module/" /opt/rh/httpd24/root/etc/httpd/conf.modules.d/00-mpm.conf
      sed -i "s/^LoadModule mpm_worker_module/#LoadModule mpm_worker_module/" /opt/rh/httpd24/root/etc/httpd/conf.modules.d/00-mpm.conf
      sed -i "s/^#LoadModule mpm_event_module/LoadModule mpm_event_module/" /opt/rh/httpd24/root/etc/httpd/conf.modules.d/00-mpm.conf
    when: 
      - ansible_distribution == 'CentOS'
      - ansible_distribution_major_version == '7'

  # - name: Tune Apache mpm_event_module
  #   copy:
  #     dest: /opt/rh/httpd24/root/etc/httpd/conf.d/mpm_event_module.conf
  #     content: |
  #       <IfModule mpm_event_module>
  #         ServerLimit            32
  #         StartServers           2
  #         MaxRequestWorkers      512
  #         MinSpareThreads        25
  #         MaxSpareThreads        75
  #         ThreadsPerChild        32
  #         MaxRequestsPerChild    0
  #         ThreadLimit            512
  #         ListenBacklog          511
  #       </IfModule>

  - name: retrieve azhop version
    delegate_to: localhost
    connection: local
    become: false
    shell: |
      git describe --always --tags
    register: azhop_version

  - name: create OOD_VERSION if not exists
    shell: |
      cp /opt/ood/VERSION /opt/ood/{{ondemand_version}}
    args: 
      creates: /opt/ood/{{ondemand_version}}

  - name: retrieve OnDemand version
    shell: |
      cat /opt/ood/{{ondemand_version}}
    register: ood_version

  - name: Override OOD version with azhop version
    shell: |
      echo "{{ood_version.stdout}} | AZHOP {{azhop_version.stdout}}" > /opt/ood/VERSION

  # Create a script to run before the PUN is created, to set the user's environment
  # Defined in the pun_pre_hook_root_cmd variable set in the ood-overrides-common.yml file
  - name: Copy the pun_pre_hook script
    copy: 
      src: files/pun_pre_hook.sh
      dest: /etc/ood/config/pun_pre_hook.sh
      mode: 0755
  
  - name: restart ood
    shell: systemctl try-restart httpd24-httpd.service httpd24-htcacheclean.service
    when: 
      - ansible_distribution == 'CentOS'
      - ansible_distribution_major_version == '7'

  - name: Ensure apache is restarted
    service: 
      name: httpd
      state: restarted
      enabled: yes
    when: 
      - ansible_distribution == 'AlmaLinux'
      - ansible_distribution_major_version == '8'

  - name: Generate new ood_portal.conf file
    shell: /opt/ood/ood-portal-generator/sbin/update_ood_portal -f
    when: 
      - ansible_distribution == 'Ubuntu'

  - name: Ensure apache is restarted
    service: 
      name: apache2
      state: restarted
      enabled: yes
    when: 
      - ansible_distribution == 'Ubuntu'

  - name: Add cvmsf-eessi support
    block:
      - name: Install cvmfs repo package
        yum:
          name: https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest.noarch.rpm 
          state: present
          lock_timeout : 180
          disable_gpg_check: true

      - name: Install cvmfs package
        yum:
          name: cvmfs 
          state: present
          lock_timeout : 180

      - name: Install EESSI config package
        yum:
          name: https://github.com/EESSI/filesystem-layer/releases/download/latest/cvmfs-config-eessi-latest.noarch.rpm
          state: present
          lock_timeout : 180
          disable_gpg_check: true

      - name: Create cvmfs config 
        copy:
          dest: /etc/cvmfs/default.local
          content: |
            CVMFS_HTTP_PROXY=DIRECT
            CVMFS_QUOTA_LIMIT=10000

      - name: Configure cvmfs 
        shell: cvmfs_config setup 
    when:  
      - ( cvmfs_eessi.enabled | default(false) )
      - ansible_distribution in ['AlmaLinux', 'CentOS']

  - name: "yq: Download and install"
    get_url:
      url: "https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/{{ yq_binary }}"
      dest: /usr/bin/yq
      mode: 0755

# Configure bc_desktop for dynamic remote viz targets
  - name: copy bc_desktop file
    copy:
      remote_src: true
      src: /etc/ood/config/apps/bc_desktop/ondemand.yml
      dest: /etc/ood/config/apps/bc_desktop/ondemand.yml.erb

  - name: configure bc_desktop to dynamically load viz targets
    blockinfile:
      path: /etc/ood/config/apps/bc_desktop/ondemand.yml.erb
      insertafter : "options: null"
      backup: no
      block: |
        # Dynamically load viz targets - keep indentation as is
                <%- File.readlines("/etc/ood/config/apps/bc_desktop/config/viz_nodes.yml").each do |line|  %>
                    <%= line.to_s %>
                <%- end %>
  - name: remove the null value of the options
    replace:
      path: /etc/ood/config/apps/bc_desktop/ondemand.yml.erb
      regexp: 'options: null'
      replace: 'options:' 

  # Generate the node array core lookup file for ondemand - will be only run if the marker file for ccluster exists
  - import_tasks: nodearray_lookup.yml
    vars:
      marker_file: cccluster.ok

  - name: Update Packages
    include_role:
      name: pkg_update
      apply: 
        become: true
    vars:
      packages_to_exclude_from_upgrade: "{{ (['ondemand','amlfs'] if ( lustre.create | default(false)) else ['ondemand']) }}"
