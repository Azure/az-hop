- hosts: ondemand
  #gather_facts: no
  become: true
  vars_files:
    - '{{global_config_file}}'

  tasks:
  - name: Set up PAM authentication
    shell: |
      yum install -y mod_authnz_pam
      mkdir -p /opt/rh/httpd24/root/usr/lib64/httpd/modules/
      cp /usr/lib64/httpd/modules/mod_authnz_pam.so /opt/rh/httpd24/root/usr/lib64/httpd/modules/
      mkdir -p /opt/rh/httpd24/root/etc/httpd/conf.modules.d
      echo "LoadModule authnz_pam_module modules/mod_authnz_pam.so" > /opt/rh/httpd24/root/etc/httpd/conf.modules.d/55-authnz_pam.conf
      cp /etc/pam.d/sshd /etc/pam.d/ood
      chmod 640 /etc/shadow
      chgrp apache /etc/shadow
    args:
      creates: /etc/pam.d/ood
  - name: Check if we need to register HTTPS
    stat:
      path: /etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt
    register: sslcert
  - name: Run the ood-anisible role to get certificate
    include_role:
      name: ood-ansible
    vars:
      servername: null
      httpd_port: 80
      httpd_public_uri: /.well-known
      httpd_public_root: /var/www/ood/.well-known
    when: sslcert.stat.exists == False
  - name: Setup HTTPS certificate
    shell: |
      cd /root

      # get ssl
      curl --silent https://raw.githubusercontent.com/srvrco/getssl/master/getssl > getssl
      chmod 700 getssl

      # Generate the certificate
      ./getssl -c {{ ondemand_fqdn }}
      cat <<EOF > ${HOME}/.getssl/{{ ondemand_fqdn }}/getssl.cfg 
      CA="https://acme-v02.api.letsencrypt.org"
      SANS=""
      ACL=('/var/www/ood/.well-known/acme-challenge')
      EOF
      ./getssl {{ ondemand_fqdn }} 2>&1 | tee getssl-{{ ondemand_fqdn }}.log

      # set the certificate
      mkdir /etc/ssl/{{ ondemand_fqdn }}
      cp /root/.getssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt /etc/ssl/{{ ondemand_fqdn }}
      cp /root/.getssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.key /etc/ssl/{{ ondemand_fqdn }}
      wget https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt -O /etc/ssl/{{ ondemand_fqdn }}/letsencryptauthorityx3.pem.txt
    args:
      creates: /etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt
    when: sslcert.stat.exists == False
  - name: Run the ood-ansible role for HTTPS
    include_role:
      name: ood-ansible
    vars:
      servername: "{{ ondemand_fqdn }}"
      httpd_port: 443
      ssl:
      - SSLCertificateFile "/etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.crt"
      - SSLCertificateKeyFile "/etc/ssl/{{ ondemand_fqdn }}/{{ ondemand_fqdn }}.key"
      - SSLCertificateChainFile "/etc/ssl/{{ ondemand_fqdn }}/letsencryptauthorityx3.pem.txt"
  - name: Copy logo
    copy: 
      src: logo.png
      dest: /var/www/ood/public
  - name: Copy favicon
    copy: 
      src: favicon.ico
      dest: /var/www/ood/public
  - name: Run the pbsclient role
    include_role:
      name: pbsclient
      apply:
        become: true
    vars:
      pbs_server: scheduler
  - name: setup cyclecloud proxy
    shell: |
        if ! grep -q ccportal /opt/ood/ood-portal-generator/templates/ood-portal.conf.erb; then
          cd /root
          cat << EOF > cyclecloud_proxy
          SetEnv OOD_CC_URI "/cyclecloud"
          <Location "/cyclecloud">
            AuthType Basic
            AuthName "Open OnDemand"
            AuthBasicProvider PAM
            AuthPAMService ood
            Require valid-user

            ProxyPass http://ccportal:80/cyclecloud
            ProxyPassReverse http://ccportal:80/cyclecloud
          </Location>
        EOF
          sed -i '$e cat cyclecloud_proxy' /opt/ood/ood-portal-generator/templates/ood-portal.conf.erb
          rm cyclecloud_proxy
          /opt/ood/ood-portal-generator/sbin/update_ood_portal
          systemctl try-restart httpd24-httpd.service httpd24-htcacheclean.service
        fi
  - name: add cvmfs repo
    yum: 
      name: https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest.noarch.rpm
  - name: add cvmfs
    yum: 
      name: cvmfs, Lmod, hwloc, numactl 
  - name: configure cvmfs
    command: cvmfs_config setup
  - name: cvmfs generic.azure config 
    get_url:
      url: "https://cvmfs.blob.core.windows.net/generic/generic.azure.conf"
      dest: /etc/cvmfs/config.d/generic.azure.conf 
      mode: '644'
  - name: cvmfs generic.azure public key 
    get_url:
      url: "https://cvmfs.blob.core.windows.net/generic/generic.azure.pub"
      dest: /etc/cvmfs/keys/generic.azure.pub 
      mode: '644'
  - name: create ssh_config file
    copy:
      content: |
        Host *
          StrictHostKeyChecking=No
      dest: /etc/ssh/ssh_config

  - include_role: 
      name: ood-apps-cyclecloud
      apply: 
        become: true
  - include_role: 
      name: ood-apps-grafana
      apply: 
        become: true
