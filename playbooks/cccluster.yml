---
# This looks crazy but in order for this playbook to run from a pipeline, the jumpbox dummy need to be added
- name: jumpbox dummy
  hosts: jumpbox
  become: true

- name: Setup cyclecloud
  hosts: ccportal
  become: true
  gather_facts: no
  vars:
    - lookup_img_file: image_lookup.yml
  vars_files:
    - '{{global_config_file}}'

  tasks:
  - name: Wait 300 seconds for the nodes to be ready
    wait_for_connection:
      timeout: 300
  - name: Gather facts for first time
    setup:

  - name: Read Password from KV
    command: az keyvault secret show --vault-name {{key_vault}} -n {{admin_user}}-password --query "value" -o tsv
    delegate_to: localhost
    connection: local
    register: password
    become: false

  - name: Read AD Join Password from KV
    command: az keyvault secret show --vault-name {{key_vault}} -n {{ad_join_user}}-password --query "value" -o tsv
    delegate_to: localhost
    connection: local
    register: ad_join_password
    become: false

  - name: Init image lookup file
    shell: |
        echo "image_lookup:" > {{lookup_img_file}}
    args:
      executable: /bin/bash
    delegate_to: localhost
    connection: local
    become: false

# Rewrite queue.image propertie to include the image version number for images stored in the SIG
  - name: Overwrite image version when needed
    shell: |
      # If image name end with /latest, then retrieve the image version from the SIG
      image={{item.image}}
      version=${image##*/}
      if [ "$version" == "latest" ]; then
        img_def=${image%/*}
        img_name=${img_def##*/}
        sig_rg=$(echo $image | cut -d'/' -f 5)
        sig_name=$(echo $image | cut -d'/' -f 9)
        img_id=$(az sig image-version list -g $sig_rg -r $sig_name -i $img_name --query "[].[publishingProfile.publishedDate, id]" -o tsv | sort -V -r | head -n1 | cut -f2 | xargs)
        if [ "$img_id" == "" ]; then
          echo "unable to retrieve image id for $img_name"
          exit 1
        else
          echo "  {{item.name}}: $img_id" >> {{lookup_img_file}}
        fi
      fi
    args:
      executable: /bin/bash
    delegate_to: localhost
    connection: local
    become: false
    with_items: "{{queues}}"

# Rewrite remoteviz.image propertie to include the image version number for images stored in the SIG
  - name: Overwrite image version when needed
    shell: |
      # If image name end with /latest, then retrieve the image version from the SIG
      image={{item.image}}
      version=${image##*/}
      if [ "$version" == "latest" ]; then
        img_def=${image%/*}
        img_name=${img_def##*/}
        sig_rg=$(echo $image | cut -d'/' -f 5)
        sig_name=$(echo $image | cut -d'/' -f 9)
        img_id=$(az sig image-version list -g $sig_rg -r $sig_name -i $img_name --query "[].[publishingProfile.publishedDate, id]" -o tsv | sort -V -r | head -n1 | cut -f2 | xargs)
        if [ "$img_id" == "" ]; then
          echo "unable to retrieve image id for $img_name"
          exit 1
        else
          echo "  {{item.name}}: $img_id" >> {{lookup_img_file}}
        fi
      fi
    args:
      executable: /bin/bash
    delegate_to: localhost
    connection: local
    become: false
    with_items: "{{remoteviz}}"

  - name: Load lookup image version
    include_vars:
      file: '{{lookup_img_file}}'

  - include_role: 
      name: cyclecloud_cluster
      apply: 
        become: true
    vars:
      cc_region: '{{location}}'
      cc_subnetid: '{{compute_subnetid}}'
      cc_admin_user: '{{admin_user}}'
      cc_password: '{{password.stdout}}'
      cc_ad_join_password: '{{ad_join_password.stdout}}'
      cc_queues: '{{queues}}'
      cc_remoteviz: '{{remoteviz}}'
      cc_image_lookup: '{{image_lookup}}'
      cc_domain: '{{domain_name}}'
      cc_queue_manager: '{{ queue_manager | default("openpbs") }}'
      influxdb_database_name: "telegraf"
      telegraf_influxdb_urls: 
        - "http://grafana:8086"
      cc_slurm_version: '{{slurm.slurm_version | default("20.11.9")}}-1'
      slurm_uid: 11100
      slurm_gid: 11100
      munge_uid: 11101
      munge_gid: 11101
      enroot_version: '{{enroot.enroot_version | default("3.4.1")}}'
      enroot_scratch_dir: '/mnt/resource'
      cvmfs_eessi_enabled: '{{cvmfs_eessi.enabled | default(false)}}'
      cc_enable_remote_winviz: '{{enable_remote_winviz | default(false)}}'

  # Generate the node array core lookup file for ondemand - will be only run if the marker file for ondemand exists
  - import_tasks: nodearray_lookup.yml
    vars:
      marker_file: ood.ok
