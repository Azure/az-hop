---
# This looks crazy but in order for this playbook to run from a pipeline, the jumpbox dummy need to be added
# - name: jumpbox dummy
#   hosts: jumpbox
#   become: true
#   vars_files:
#     - '{{global_config_file}}'
- name: Setup cyclecloud
  hosts: ccportal
  become: true
  gather_facts: no
  vars:
    - ansible_python_interpreter: /usr/bin/python3
    - lookup_img_file: image_lookup.yml
  vars_files:
    - '{{global_config_file}}'

  tasks:
  - name: Wait 300 seconds for the nodes to be ready
    wait_for_connection:
      timeout: 300
  - name: Gather facts for first time
    setup:

  - name: Read Password from KV
    command: az keyvault secret show --vault-name {{key_vault}} -n {{admin_user}}-password --query "value" -o tsv
    delegate_to: localhost
    connection: local
    register: password
    become: false

  - name: Init image lookup file
    shell: |
        echo "image_lookup:" > {{lookup_img_file}}
    args:
      executable: /bin/bash
      warn: false
    delegate_to: localhost
    connection: local
    become: false

# Rewrite queue.image propertie to include the image version number for images stored in the SIG
  - name: Overwrite image version when needed
    shell: |
      # If image name end with /latest, then retrieve the image version from the SIG
      image={{item.image}}
      version=${image##*/}
      if [ "$version" == "latest" ]; then
        img_def=${image%/*}
        img_name=${img_def##*/}
        img_id=$(az sig image-version list -g {{ resource_group }} -r {{ sig_name }} -i $img_name --query "[].id" -o tsv | sort | tail -n 1)
        if [ "$img_id" == "" ]; then
          echo "unable to retrieve image id for $img_name"
          exit 1
        else
          echo "  {{item.name}}: $img_id" >> {{lookup_img_file}}
        fi
      fi
    args:
      executable: /bin/bash
    delegate_to: localhost
    connection: local
    become: false
    with_items: "{{queues}}"

  - name: Load lookup image version
    include_vars:
      file: '{{lookup_img_file}}'

  - include_role: 
      name: cyclecloud_cluster
      apply: 
        become: true
    vars:
      cc_region: '{{location}}'
      cc_subnetid: '{{compute_subnetid}}'
      cc_admin_user: '{{admin_user}}'
      cc_password: '{{password.stdout}}'
      cc_queues: '{{queues}}'
      cc_image_lookup: '{{image_lookup}}'
      cc_domain: '{{ad_join_domain}}'
      cc_ad_server: '{{ad_dns}}'
      cc_queue_manager: '{{ queue_manager | default("openpbs") }}'
      influxdb_database_name: "telegraf"
      telegraf_influxdb_urls: 
        - "http://grafana:8086"
      cc_slurm_version: 20.11.7-1
      slurm_uid: 971
      slurm_gid: 971
