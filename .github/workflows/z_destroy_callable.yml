name : Destroy Callable Workflow

on:
  workflow_call:
    inputs:
      resource_group:
        description: 'Resource group to destroy'
        required: true
        type: string
  
    secrets:
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZHOP_STATE_CONTAINER: environments
  AZHOP_STATE_ACCOUNT: azhopstates

defaults:
  run:
    shell: bash

jobs:
  destroy:
    name: destroy
    runs-on: self-hosted
    permissions:
      contents: read
    timeout-minutes: 60

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Login azure
        run: |
          source /miniconda/bin/activate
          az login -i
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
          echo "local user: $(whoami)"

      - name: Destroy
        id: destroy
        run: |
          set -e
          source /miniconda/bin/activate

          RESOURCE_GROUP="${{ inputs.resource_group }}"
          rg_exists=$(az group exists -n $RESOURCE_GROUP)
          if [ "$rg_exists" = "true" ]; then
            echo "Download state files for $RESOURCE_GROUP"
            ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP

            echo "Remove resources from $RESOURCE_GROUP"
            set +e
            ./bicep/cleanup.sh

            echo "Remove state from $RESOURCE_GROUP"
            ./azhop_state.sh delete ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP

            echo "removing resource group $RESOURCE_GROUP"
            az group delete -n $RESOURCE_GROUP -y --no-wait
          fi
