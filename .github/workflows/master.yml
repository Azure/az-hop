#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#

name : master

on:
  workflow_dispatch: # This allow you to trigger the workflow manually
  push:
    paths:
      - .devcontainer
      - .github/workflows/master.yml
      - 'tf/**'
      - 'playbooks/**'

env:
  TF_CLI_ARGS: '-no-color'
  TF_CLI_ARGS_destroy: '-auto-approve -refresh=false'
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest

    container:
      image: xpillons/hpcrover:2011.2514 
      options: --user 0

    outputs:
        resource_group: ${{ steps.deploy.outputs.resource_group }}

    steps:
      - uses: actions/checkout@v2

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
          echo "local user: $(whoami)"

      - name: Deployment
        id: deploy
        run: |
          UUID="$(cat /proc/sys/kernel/random/uuid | tr -d '\n-' | tr '[:upper:]' '[:lower:]' | cut -c 1-6)"
          export RESOURCE_GROUP="hpc_$UUID"
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
          echo "::set-output name=RESOURCE_GROUP::$RESOURCE_GROUP"
          terraform init ./tf
          terraform apply -auto-approve -parallelism=30 -var location=westeurope -var resource_group=$RESOURCE_GROUP ./tf

      - name: Configure
        run: |
          pip3 install pypsrp
          pip3 install pysocks
          ansible-galaxy collection install ansible.windows
          ansible-galaxy collection install community.windows

          ansible-playbook -i playbooks/inventory ./playbooks/ad.yml 
          ansible-playbook -i playbooks/inventory ./playbooks/linux.yml 
          ansible-playbook -i playbooks/inventory ./playbooks/scheduler.yml 
          ansible-playbook -i playbooks/inventory ./playbooks/ccportal.yml
          ansible-playbook -i playbooks/inventory ./playbooks/ood.yml --extra-vars=@playbooks/ood-overrides.yml
          
  cleanup:
    name: cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: deploy

    container:
      image: xpillons/hpcrover:2011.2514 
      options: --user 0

    steps:
      - uses: actions/checkout@v2

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Remove Resources
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          echo "removing resource group $RESOURCE_GROUP"
          az group delete -n $RESOURCE_GROUP -y 
          #--no-wait

