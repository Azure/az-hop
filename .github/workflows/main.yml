#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#

name : main

on:
  workflow_dispatch: # This allow you to trigger the workflow manually
  push:
    branches:
      - main
    paths:
      - .devcontainer
      - 'packer/**'
      - 'tf/**'
      - 'playbooks/**'
      - build.sh
      - install.sh
      - '!**.md'

env:
  TF_CLI_ARGS: '-no-color'
  TF_CLI_ARGS_destroy: '-auto-approve -refresh=false'
  TF_CLI_ARGS_apply: '-auto-approve'
  TF_TEMPLATE_CONFIGURATION: '.github/workflows/deployhpc.yml.tpl'
  TF_CONFIGURATION: 'deployhpc.yml'
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest

    container:
      image: xpillons/hpcrover:2012.0309
      options: --user 0

    outputs:
        resource_group: ${{ steps.deploy.outputs.resource_group }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
          echo "local user: $(whoami)"

      - name: Deployment
        id: deploy
        run: |
          set -e
          VERSION_TAG=$(date +"%g%m.%d%H")
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV

          UUID="$(cat /proc/sys/kernel/random/uuid | tr -d '\n-' | tr '[:upper:]' '[:lower:]' | cut -c 1-6)"
          RESOURCE_GROUP="deployhpc_$UUID"
          #echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
          echo "::set-output name=RESOURCE_GROUP::$RESOURCE_GROUP"
          
          sed 's/__LOCATION__/westeurope/g;s/__RESOURCE_GROUP__/$RESOURCE_GROUP/g' $TF_TEMPLATE_CONFIGURATION > $TF_CONFIGURATION

          #echo "location= \"westeurope\"" > $TF_CONFIGURATION
          #echo "resource_group= \"$RESOURCE_GROUP\"" >> $TF_CONFIGURATION
          cat $TF_CONFIGURATION

          ./build.sh -a apply -f ./tf

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: artifact
          path: |
            deployhpc.yml
            playbooks/inventory
            playbooks/group_vars/*
            packer/options.json
            *_id_rsa
            *_id_rsa.pub
            tf/terraform.tfstate
          retention-days: 1

  configure:
    name: configure
    runs-on: ubuntu-latest
    needs: deploy

    container:
      image: xpillons/hpcrover:2012.0309
      options: --user 0

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
         
      - uses: actions/download-artifact@v2
        with: 
          name: artifact

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          # Fix SSH Keys permission as they are not preserved by the artifacts
          chmod 600 hpcadmin_id_rsa
          chmod 644 hpcadmin_id_rsa.pub
          ls -al
          ./install.sh

  build_image:
    name: build_image
    runs-on: ubuntu-latest
    needs: deploy
    strategy: 
      matrix:
        packer_file: ["centos-7.7-desktop-3d.json", "centos77-v1-rdma-gpgpu.json", "centos77-v2-rdma-gpgpu.json"]
    container:
      image: xpillons/hpcrover:2012.0309
      options: --user 0

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
         
      - uses: actions/download-artifact@v2
        with: 
          name: artifact

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Build Images
        run: |
          cd packer
          ./build_image.sh ${{matrix.packer_file}}

  release:
    runs-on: ubuntu-latest
    needs: [configure, build_image]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set Release
        run: |
          VERSION_TAG=$(date +"%g%m.%d%H")
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION_TAG }}
          release_name: v${{ env.VERSION_TAG }}
          draft: false
          prerelease: true

  cleanup:
    name: cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy, configure, build_image]

    container:
      image: xpillons/hpcrover:2012.0309
      options: --user 0

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
         
      - uses: actions/download-artifact@v2
        with: 
          name: artifact

      - name: Login azure
        if: always()
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Remove Resources
        run: |
          ls -al

          ./build.sh -a destroy -f ./tf

      - name: Cleanup
        if: always()
        run: |

          # If resource group is still there after destroy remove it
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          rg_exists=$(az group exists -n $RESOURCE_GROUP)
          if [ "$rg_exists" = "true" ]; then
            echo "removing resource group $RESOURCE_GROUP"
            az group delete -n $RESOURCE_GROUP -y --no-wait
          fi
