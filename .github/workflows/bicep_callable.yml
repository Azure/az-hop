#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#
name : bicep_callable

on:
  workflow_call:
    inputs:
      resource_group:
        description: 'Name of the resource group to deploy in - In case of an existing resource group the environment will be updated'
        required: true
        default: 'AUTO_GENERATED'
        type: string
      location:
        description: 'Azure location where to deploy to - default to westeurope'
        required: false
        default: 'westeurope'
        type: string
      clean:
        description: 'Clean all resources'
        required: false
        default: 'true' # use it with ${{ inputs.clean }}
        type: string
      anf_dual:
        description: 'Use ANF Dual Protocol'
        required: false
        default: 'false' # use it with ${{ inputs.anf_dual }}
        type: string
      scheduler:
        description: 'Job Scheduler to be installed : openpbs/slurm'
        required: true
        default: 'openpbs' # use it with ${{ inputs.scheduler }}
        type: string
      lustre:
        description: 'Deploy a Lustre cluster (true/false) - Default to true'
        required: true
        default: 'true' # use it with ${{ inputs.lustre }}
        type: string
    secrets:
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true

env:
  AZHOP_CONFIGURATION: '.github/workflows/configs/build.yml'
  AZHOP_LUSTRE_CONFIGURATION: '.github/workflows/configs/lustre.yml'
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZHOP_STATE_CONTAINER: environments
  AZHOP_STATE_ACCOUNT: azhopstates
  ANSIBLE_VERBOSITY: 2 # From 0 to 4 based on the level of logs needed in Ansible

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 60

    container:
      image: azhop.azurecr.io/hpcrover:2210.1816
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    outputs:
        resource_group: ${{ steps.deploy.outputs.resource_group }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
          echo "local user: $(whoami)"

      - name: Deployment
        id: deploy
        run: |
          set -e
          # If resource group is not specified, generate a random one
          RESOURCE_GROUP=${{ inputs.resource_group }}
          echo "Resource group name is $RESOURCE_GROUP"
          if [ "$RESOURCE_GROUP" = "AUTO_GENERATED" ]; then
            UUID="$(cat /proc/sys/kernel/random/uuid | tr -d '\n-' | tr '[:upper:]' '[:lower:]' | cut -c 1-6)"
            RESOURCE_GROUP="azhop_$UUID"
          fi

          # Update the default configuration with the resource group name and dual protocol options
          cp $AZHOP_CONFIGURATION ./deploy/build.yml

          # write the name of the resource group in the output of the job so it can be reused in others
          echo "::set-output name=RESOURCE_GROUP::$RESOURCE_GROUP"
          ls -al ./deploy
          cat ./deploy/build.yml
          cd ./deploy
          ./deploy.sh $RESOURCE_GROUP

  cleanup:
    name: cleanup
    runs-on: ubuntu-latest
    if: always() && inputs.clean == 'true'
    needs: [deploy]

    steps:
      - uses: actions/checkout@v3

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Cleanup
        run: |

          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          rg_exists=$(az group exists -n $RESOURCE_GROUP)
          if [ "$rg_exists" = "true" ]; then
            echo "Removing resource group $RESOURCE_GROUP"
            az group delete -n $RESOURCE_GROUP -y
          fi
