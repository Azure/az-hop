#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#
name : main_callable

on:
  workflow_call:
    inputs:
      resource_group:
        description: 'Name of the resource group to deploy in - In case of an existing resource group the environment will be updated'
        required: true
        default: 'AUTO_GENERATED'
        type: string
      location:
        description: 'Azure location where to deploy to - default to westeurope'
        required: false
        default: 'westeurope'
        type: string
      clean:
        description: 'Clean all resources'
        required: false
        default: 'true' # use it with ${{ inputs.clean }}
        type: string
      anf_dual:
        description: 'Use ANF Dual Protocol'
        required: false
        default: 'false' # use it with ${{ inputs.anf_dual }}
        type: string
      scheduler:
        description: 'Job Scheduler to be installed : openpbs/slurm'
        required: true
        default: 'openpbs' # use it with ${{ inputs.scheduler }}
        type: string
      images:
        description: 'Images to be used (marketplace/shared) or built (private): marketplace/shared/private'
        required: false
        default: 'marketplace' # use it with ${{ inputs.images }}
        type: string
      lustre:
        description: 'Deploy a Lustre cluster (true/false) - Default to true'
        required: true
        default: 'false' # use it with ${{ inputs.lustre }}
        type: string
      deploy_only:
        description: 'Deploy only - Default to false'
        required: false
        default: 'false' # use it with ${{ inputs.deploy_only }}
        type: string
      deploy_with:
        description: 'Method used for the deployment - tf, bicep or arm - Default to tf'
        required: false
        default: 'tf' # use it with ${{ inputs.deploy_with }}
        type: string
      home_type:
        description: 'Home directory type anf/azurefiles- Default to anf'
        required: false
        default: 'anf' # use it with ${{ inputs.home_type }}
        type: string
      config:
        description: 'Configuration - (minimum/integration) - Default to integration'
        required: false
        default: 'integration' # use it with ${{ inputs.config }}
        type: string

    secrets:
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true

env:
  TF_CLI_ARGS: '-no-color'
  TF_CLI_ARGS_destroy: '-auto-approve -refresh=false'
  TF_CLI_ARGS_apply: '-auto-approve'
  AZHOP_CONFIGURATION: '.github/workflows/configs/${{ inputs.config }}.yml'
  AZHOP_LUSTRE_CONFIGURATION: '.github/workflows/configs/lustre.yml'
  AZHOP_IMAGES_CONFIGURATION: '.github/workflows/configs/images.yml'
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  SHARED_SIG: /subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/azhop_build_images/providers/Microsoft.Compute/galleries/azhop_4ehhye3z
  AZHOP_STATE_CONTAINER: environments
  AZHOP_STATE_ACCOUNT: azhopstates
  ANSIBLE_VERBOSITY: 2 # From 0 to 4 based on the level of logs needed in Ansible

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: deploy
    runs-on: self-hosted
    permissions:
      contents: read
    timeout-minutes: 60

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    outputs:
        resource_group: ${{ steps.deploy.outputs.resource_group }}
        run_ad_job: ${{ steps.deploy.outputs.run_ad_job }}
        run_lustre_job: ${{ steps.deploy.outputs.run_lustre_job }}
        run_grafana_job: ${{ steps.deploy.outputs.run_grafana_job }}
        run_cycle_job: ${{ steps.deploy.outputs.run_cycle_job }}
        run_image_job: ${{ steps.deploy.outputs.run_image_job }}
        run_addusers_job: ${{ steps.deploy.outputs.run_addusers_job }}
        run_cyclecluster_job: ${{ steps.deploy.outputs.run_cyclecluster_job }}
        run_ood_job: ${{ steps.deploy.outputs.run_ood_job }}
        run_tests_job: ${{ steps.deploy.outputs.run_tests_job }}
        run_telegraf_job: ${{ steps.deploy.outputs.run_telegraf_job }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Login azure
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
          echo "local user: $(whoami)"

      - name: Deployment
        id: deploy
        run: |
          set -e
          source /miniconda/bin/activate
          # If resource group is not specified, generate a random one
          RESOURCE_GROUP=${{ inputs.resource_group }}
          echo "Resource group name is $RESOURCE_GROUP"
          if [ "$RESOURCE_GROUP" = "AUTO_GENERATED" ]; then
            UUID="$(cat /proc/sys/kernel/random/uuid | tr -d '\n-' | tr '[:upper:]' '[:lower:]' | cut -c 1-6)"
            RESOURCE_GROUP="azhop_$UUID"
          fi

          # If the resource group exists, download the latest state, if not build a new configuration file
          rg_exists=$(az group exists -n $RESOURCE_GROUP)
          if [ "$rg_exists" = "true" ]; then
            ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          else
            # Update the default configuration with the resource group name and dual protocol options
            sed "s/__RESOURCE_GROUP__/$RESOURCE_GROUP/g" $AZHOP_CONFIGURATION > config.yml
            ANF_DUAL=${{ inputs.anf_dual }}
            sed -i "s/__ANF_DUAL__/$ANF_DUAL/g" config.yml
            SCHEDULER=${{ inputs.scheduler }}
            sed -i "s/__SCHEDULER__/$SCHEDULER/g" config.yml
            LOCATION=${{ inputs.location }}
            sed -i "s/__LOCATION__/$LOCATION/g" config.yml
            HOME_TYPE=${{ inputs.home_type }}
            sed -i "s/__HOME_TYPE__/$HOME_TYPE/g" config.yml
            if [ "$HOME_TYPE" == "anf" ]; then
              sed -i 's/__CREATE_ANF__/true/g' config.yml
              sed -i 's/__CREATE_AZUREFILES__/false/g' config.yml
            else
              sed -i 's/__CREATE_ANF__/false/g' config.yml
              sed -i 's/__CREATE_AZUREFILES__/true/g' config.yml
            fi

            # Add lustre configuration if lustre is true
            DEPLOY_LUSTRE=${{ inputs.lustre }}
            if [ "$DEPLOY_LUSTRE" == "true" ]; then
              cat $AZHOP_LUSTRE_CONFIGURATION >> config.yml
            fi

            # Configure images
            IMAGES=${{ inputs.images }}
            case $IMAGES in
              marketplace)
                echo "Using marketplace images"

                sed -i 's|__ALMA8_PLAN__||g' config.yml
                ;;
              shared)
                echo "Using shared images"
                sed -i "s|azhpc:azhop-compute:centos-7_9:latest|$SHARED_SIG/azhop-compute-centos-7_9/latest|g" config.yml
                sed -i "s|azhpc:azhop-desktop:centos-7_9:latest|$SHARED_SIG/azhop-desktop-centos-7_9/latest|g" config.yml
                sed -i "s|azhpc:azhop-compute:almalinux-8_7:latest|$SHARED_SIG/azhop-compute-almalinux-8_7/latest|g" config.yml
                sed -i "s|azhpc:azhop-compute:ubuntu-20_04:latest|$SHARED_SIG/azhop-compute-ubuntu-2004/latest|g" config.yml

                sed -i "s|__ALMA8_PLAN__|plan: almalinux:almalinux:8-gen2|g" config.yml
                ;;
              private)
                echo "Using private images"
                cat $AZHOP_IMAGES_CONFIGURATION >> config.yml
                SIG="/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group}}/providers/Microsoft.Compute/galleries/{{sig_name}}/images"
                sed -i "s|azhpc:azhop-compute:centos-7_9:latest|$SIG/azhop-compute-centos-7_9/latest|g" config.yml
                sed -i "s|azhpc:azhop-desktop:centos-7_9:latest|$SIG/azhop-desktop-centos-7_9/latest|g" config.yml
                sed -i "s|azhpc:azhop-compute:almalinux-8_7:latest|$SIG/azhop-compute-almalinux-8_7/latest|g" config.yml
                sed -i "s|azhpc:azhop-compute:ubuntu-20_04:latest|$SIG/azhop-compute-ubuntu-2004/latest|g" config.yml

                sed -i "s|__ALMA8_PLAN__|plan: almalinux:almalinux:8-gen2|g" config.yml
                ;;
            esac

            # If peering, then find out which IP range can be used
            peered_vnet=$(yq eval ".network.peering[0].vnet_name" config.yml)
            if [ "$peered_vnet" != "null" ]; then
              peered_vnet_rg=$(yq eval ".network.peering[0].vnet_resource_group" config.yml)
              # fill up range mapping
              declare -A range_mapping
              for i in $(seq 0 1 255); do
                range_mapping[$i]=0
              done
              # Get all peered IP ranges
              remoteAddressSpace=$(az network vnet peering list --resource-group $peered_vnet_rg --vnet-name $peered_vnet --query '[].remoteAddressSpace.addressPrefixes' -o tsv)
              for address in $remoteAddressSpace; do
                echo "Peered IP range: $address"
                # Get the second octet of the IP range
                octet=$(echo $address | cut -d. -f2)
                range_mapping[$octet]=1
              done
              echo ${range_mapping[@]}
              second_octet=$(( ( RANDOM % 254 )  + 1 ))
              while [ ${range_mapping[$second_octet]} == 1 ]; do
                second_octet=$(( ( RANDOM % 254 )  + 1 ))
              done
              echo "Second octet: $second_octet"
              sed_exp="s/10.128/10.$second_octet/g"
              sed -i $sed_exp config.yml
            fi
          fi

          # write the name of the resource group in the output of the job so it can be reused in others
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_OUTPUT

          ls -al 
          cat config.yml
          anf_dual=$(yq eval '.anf.dual_protocol' config.yml)
          DEPLOY_WITH=${{ inputs.deploy_with }}

          # Check if we need to build with dual protocol
          build_error=0
          if [ "$anf_dual" != "true" ]; then
            set +e
            ./build.sh -a apply -l $DEPLOY_WITH
            build_error=$?
            set -e
            ./azhop_state.sh upload ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }}
          else
            # Build the AD intrastructure
            set +e
            ./build.sh -a apply -f tf/active_directory
            build_error=$?
            set -e
            ./azhop_state.sh upload ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }}

            # Configure AD and DNS
            ./install.sh ad
            ./install.sh dns

            # Build the remaining infrastructure
            set +e
            ./build.sh -a apply -f tf
            build_error=$?
            set -e
            ./azhop_state.sh upload ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }}
          fi

          # Create the passwords file if not deploying with arm
          if [ "$DEPLOY_WITH" != "arm" ]; then
            ./create_passwords.sh
          fi

          deploy_and_install=true
          if [ "${{ inputs.deploy_only }}" == true ]; then
            deploy_and_install=false
          fi

          run_ad_job=$deploy_and_install
          run_lustre_job=$deploy_and_install
          run_grafana_job=$deploy_and_install
          run_cycle_job=$deploy_and_install
          run_image_job=$deploy_and_install
          run_addusers_job=$deploy_and_install
          run_cyclecluster_job=$deploy_and_install
          run_ood_job=$deploy_and_install
          run_tests_job=$deploy_and_install
          run_telegraf_job=$deploy_and_install

          # Create the variables to control the execution of next jobs
          if [ "$DEPLOY_WITH" == "arm" ]; then
            run_ad_job=false
            run_lustre_job=false
            run_grafana_job=false
            run_cycle_job=false
            run_image_job=false
            run_addusers_job=false
            run_cyclecluster_job=false
            run_ood_job=false
            run_tests_job=false
            run_telegraf_job=false
          else
            install_lustre=$(yq eval ".lustre.create" config.yml)
            if [ "$install_lustre" == "true" ]; then
              run_lustre_job=$deploy_and_install
            else
              run_lustre_job=false
            fi
          fi

          echo "run_ad_job=$run_ad_job" >> $GITHUB_OUTPUT
          echo "run_lustre_job=$run_lustre_job" >> $GITHUB_OUTPUT
          echo "run_grafana_job=$run_grafana_job" >> $GITHUB_OUTPUT
          echo "run_cycle_job=$run_cycle_job" >> $GITHUB_OUTPUT
          echo "run_image_job=$run_image_job" >> $GITHUB_OUTPUT
          echo "run_addusers_job=$run_addusers_job" >> $GITHUB_OUTPUT
          echo "run_cyclecluster_job=$run_cyclecluster_job" >> $GITHUB_OUTPUT
          echo "run_ood_job=$run_ood_job" >> $GITHUB_OUTPUT
          echo "run_tests_job=$run_tests_job" >> $GITHUB_OUTPUT
          echo "run_telegraf_job=$run_telegraf_job" >> $GITHUB_OUTPUT
          exit $build_error

  ad:
    name: ad
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: deploy

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_ad_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_ad_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        if: needs.deploy.outputs.run_ad_job == 'true'
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ad
          ./install.sh dns
          ./install.sh linux

  lustre:
    name: lustre
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: [ad, deploy, grafana]
#    if: inputs.deploy_only == 'false' && inputs.deploy_with != 'arm'

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_lustre_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_lustre_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        if: needs.deploy.outputs.run_lustre_job == 'true'
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          install_lustre=$(yq eval ".lustre" config.yml)
          if [ "$install_lustre" != "null" ]; then
            ./install.sh lustre
          fi

  ood:
    name: ood
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: [cycle_cluster, lustre, deploy]

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_ood_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_ood_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        if: needs.deploy.outputs.run_ood_job == 'true'
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ood

  grafana:
    name: grafana
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: [ad, deploy]

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_grafana_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_grafana_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        if: needs.deploy.outputs.run_grafana_job == 'true'
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh grafana

  cycle:
    name: cycle
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: [ad, deploy]

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_cycle_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_cycle_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        if: needs.deploy.outputs.run_cycle_job == 'true'
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ccportal

  add_users:
    name: add_users
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: [cycle, deploy]

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_addusers_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_addusers_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        if: needs.deploy.outputs.run_addusers_job == 'true'
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh add_users

  cycle_cluster:
    name: cycle_cluster
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: [add_users, deploy, build_image]

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_cyclecluster_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_cyclecluster_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        if: needs.deploy.outputs.run_cyclecluster_job == 'true'
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh cccluster
          ./install.sh scheduler

  telegraf:
    name: telegraf
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: [grafana, cycle, deploy]

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_telegraf_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_telegraf_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        if: needs.deploy.outputs.run_telegraf_job == 'true'
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh telegraf
          ./install.sh chrony

  set_image_list:
    name: set_image_list
    runs-on: ubuntu-latest
    permissions:
      contents: read    
    needs: [deploy]
    if: inputs.deploy_only == 'false'

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Login azure
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: list all images to be built
        id: set-image-matrix
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          # Build the list of images from the config file
          images=$(yq eval ".images[].name" config.yml | jq -cRn '[inputs]')
          echo "Image liste : $images"
          if [ "$images" == "[]" ]; then
            images="[\"none\"]"
          fi
          echo "Image liste : $images"
          echo "matrix=$images" >> $GITHUB_OUTPUT
    # save the list into the outputs
    outputs:
      matrix: ${{ steps.set-image-matrix.outputs.matrix }}

  build_image:
    name: build_image
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: [deploy, set_image_list]
    if: inputs.deploy_only == 'false'
    strategy:
      matrix:
        packer_file: ${{ fromJson(needs.set_image_list.outputs.matrix) }}
    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_image_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_image_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Build Images
        if: needs.deploy.outputs.run_image_job == 'true'
        run: |
          source /miniconda/bin/activate
          if [ "${{matrix.packer_file}}" == "none" ]; then
            exit 0
          fi
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          cd packer
          ./build_image.sh -i ${{matrix.packer_file}}.json

  run_tests:
    name: run_tests
    runs-on: self-hosted
    permissions:
      contents: read    
    needs: [deploy, cycle, ood, cycle_cluster]
    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        if: needs.deploy.outputs.run_tests_job == 'true'

      - name: Login azure
        if: needs.deploy.outputs.run_tests_job == 'true'
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Run test playbook
        if: needs.deploy.outputs.run_tests_job == 'true'
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ansible-playbook -v -i playbooks/inventory ./playbooks/tests.yml 

  cleanup:
    name: cleanup
    runs-on: ubuntu-latest
    permissions:
      contents: read    
    if: always() && inputs.clean == 'true'
    needs: [deploy, run_tests, telegraf]

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4

      - name: Login azure
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Cleanup
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          rg_exists=$(az group exists -n $RESOURCE_GROUP)
          if [ "$rg_exists" = "true" ]; then
            echo "Download state files for $RESOURCE_GROUP"
            ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP

            echo "Remove resources from $RESOURCE_GROUP"
            set +e
            ./bicep/cleanup.sh
            ./build.sh -a destroy -f tf

            echo "Remove state from $RESOURCE_GROUP"
            ./azhop_state.sh delete ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP

            echo "removing resource group $RESOURCE_GROUP"
            az group delete -n $RESOURCE_GROUP -y
          fi
