#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#
name : main_callable

on:
  workflow_call:
    inputs:
      resource_group:
        description: 'Name of the resource group to deploy in - In case of an existing resource group the environment will be updated'
        required: true
        default: 'AUTO_GENERATED'
        type: string
      clean:
        description: 'Clean all resources'
        required: false
        default: 'true' # use it with ${{ inputs.clean }}
        type: string
      anf_dual:
        description: 'Use ANF Dual Protocol'
        required: false
        default: 'false' # use it with ${{ inputs.anf_dual }}
        type: string
      scheduler:
        description: 'Job Scheduler to be installed : openpbs/slurm'
        required: true
        default: 'openpbs' # use it with ${{ inputs.scheduler }}
        type: string
    secrets:
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true

env:
  TF_CLI_ARGS: '-no-color'
  TF_CLI_ARGS_destroy: '-auto-approve -refresh=false'
  TF_CLI_ARGS_apply: '-auto-approve'
  AZHOP_CONFIGURATION: '.github/workflows/configs/integration.yml'
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZHOP_STATE_CONTAINER: environments
  AZHOP_STATE_ACCOUNT: azhopstates
  ANSIBLE_VERBOSITY: 2 # From 0 to 4 based on the level of logs needed in Ansible

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: deploy
    runs-on: self-hosted
    timeout-minutes: 60

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    outputs:
        resource_group: ${{ steps.deploy.outputs.resource_group }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
          echo "local user: $(whoami)"

      - name: Deployment
        id: deploy
        run: |
          set -e
          # If resource group is not specified, generate a random one
          RESOURCE_GROUP=${{ inputs.resource_group }}
          echo "Resource group name is $RESOURCE_GROUP"
          if [ "$RESOURCE_GROUP" = "AUTO_GENERATED" ]; then
            UUID="$(cat /proc/sys/kernel/random/uuid | tr -d '\n-' | tr '[:upper:]' '[:lower:]' | cut -c 1-6)"
            RESOURCE_GROUP="azhop_$UUID"
          fi

          # If the resource group exists, download the latest state, if not build a new configuration file
          rg_exists=$(az group exists -n $RESOURCE_GROUP)
          if [ "$rg_exists" = "true" ]; then
            ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          else
            # Update the default configuration with the resource group name and dual protocol options
            sed "s/__RESOURCE_GROUP__/$RESOURCE_GROUP/g" $AZHOP_CONFIGURATION > config.yml
            ANF_DUAL=${{ inputs.anf_dual }}
            sed -i "s/__ANF_DUAL__/$ANF_DUAL/g" config.yml
            SCHEDULER=${{ inputs.scheduler }}
            sed -i "s/__SCHEDULER__/$SCHEDULER/g" config.yml

            # If peering, then find out which IP range can be used
            peered_vnet=$(yq eval ".network.peering[0].vnet_name" config.yml)
            if [ "$peered_vnet" != "null" ]; then
              peered_vnet_rg=$(yq eval ".network.peering[0].vnet_resource_group" config.yml)
              # fill up range mapping
              declare -A range_mapping
              for i in $(seq 0 1 255); do
                range_mapping[$i]=0
              done
              # Get all peered IP ranges
              remoteAddressSpace=$(az network vnet peering list --resource-group $peered_vnet_rg --vnet-name $peered_vnet --query '[].remoteAddressSpace.addressPrefixes' -o tsv)
              for address in $remoteAddressSpace; do
                echo "Peered IP range: $address"
                # Get the second octet of the IP range
                octet=$(echo $address | cut -d. -f2)
                range_mapping[$octet]=1
              done
              echo ${range_mapping[@]}
              second_octet=$(( ( RANDOM % 255 )  + 1 ))
              while [ ${range_mapping[$second_octet]} == 1 ]; do
                second_octet=$(( ( RANDOM % 255 )  + 1 ))
              done
              echo "Second octet: $second_octet"
              sed_exp="s/10.128/10.$second_octet/g"
              sed -i $sed_exp config.yml
            fi
          fi

          # write the name of the resource group in the output of the job so it can be reused in others
          echo "::set-output name=RESOURCE_GROUP::$RESOURCE_GROUP"
          ls -al 
          cat config.yml
          anf_dual=$(yq eval '.anf.dual_protocol' config.yml)

          # Check if we need to build with dual protocol
          build_error=0
          if [ "$anf_dual" != "true" ]; then
            set +e
            ./build.sh -a apply -f tf
            build_error=$?
            set -e
            ./azhop_state.sh upload ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }}
          else
            # Build the AD intrastructure
            set +e
            ./build.sh -a apply -f tf/active_directory
            build_error=$?
            set -e
            ./azhop_state.sh upload ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }}

            # Configure AD
            ./install.sh ad
            
            # Build the remaining infrastructure
            set +e
            ./build.sh -a apply -f tf
            build_error=$?
            set -e
            ./azhop_state.sh upload ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }}
          fi

          ./create_passwords.sh
          exit $build_error

  ad:
    name: ad
    runs-on: self-hosted
    needs: deploy

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ad
          ./install.sh linux

  lustre:
    name: lustre
    runs-on: self-hosted
    needs: [ad, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh lustre

  ood:
    name: ood
    runs-on: self-hosted
    needs: [cycle_cluster, lustre, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ood

  grafana:
    name: grafana
    runs-on: self-hosted
    needs: [ad, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh grafana

  cycle:
    name: cycle
    runs-on: self-hosted
    needs: [ad, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ccportal

  add_users:
    name: add_users
    runs-on: self-hosted
    needs: [cycle, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh add_users

  cycle_cluster:
    name: cycle_cluster
    runs-on: self-hosted
    needs: [add_users, deploy, build_image]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh cccluster
          ./install.sh scheduler

  telegraf:
    name: telegraf
    runs-on: self-hosted
    needs: [grafana, lustre, cycle, deploy, ood]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh telegraf
          ./install.sh chrony

  set_image_list:
    name: set_image_list
    runs-on: ubuntu-latest
    needs: [deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: list all images to be built
        id: set-image-matrix
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          # Build the list of images from the config file
          images=$(yq eval ".images[].name" config.yml | jq -cRn '[inputs]')
          echo "::set-output name=matrix::$images"
    # save the list into the outputs
    outputs:
      matrix: ${{ steps.set-image-matrix.outputs.matrix }}

  build_image:
    name: build_image
    runs-on: self-hosted
    needs: [deploy, set_image_list]
    strategy: 
      matrix:
        #packer_file: ["centos-7.8-desktop-3d.json", "azhop-centos79-v2-rdma-gpgpu.json"]
        packer_file: ${{ fromJson(needs.set_image_list.outputs.matrix) }}
    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Build Images
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          cd packer
          ./build_image.sh -i ${{matrix.packer_file}}.json

  run_tests:
    name: run_tests
    runs-on: self-hosted
    needs: [deploy, cycle, ood, cycle_cluster]
    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Run test playbook
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ansible-playbook -v -i playbooks/inventory ./playbooks/tests.yml 

  cleanup:
    name: cleanup
    runs-on: ubuntu-latest
    if: always() && inputs.clean == 'true'
    needs: [deploy, run_tests]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v3

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Cleanup
        run: |

          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          rg_exists=$(az group exists -n $RESOURCE_GROUP)
          if [ "$rg_exists" = "true" ]; then
            echo "Download state files for $RESOURCE_GROUP"
            ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP

            echo "Remove resources from $RESOURCE_GROUP"
            set +e
            ./build.sh -a destroy -f tf

            echo "Remove state from $RESOURCE_GROUP"
            ./azhop_state.sh delete ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP

            echo "removing resource group $RESOURCE_GROUP"
            az group delete -n $RESOURCE_GROUP -y
          fi
