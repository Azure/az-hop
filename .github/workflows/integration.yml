#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#
name : integration

on:
  workflow_dispatch:
    inputs:
      clean:
        description: 'Clean all resources'
        required: false
        default: 'true' # use it with ${{ github.event.inputs.clean }}
env:
  TF_CLI_ARGS: '-no-color'
  TF_CLI_ARGS_destroy: '-auto-approve -refresh=false'
  TF_CLI_ARGS_apply: '-auto-approve'
  AZHOP_CONFIGURATION: '.github/workflows/configs/integration.yml'
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZHOP_STATE_CONTAINER: environments
  AZHOP_STATE_ACCOUNT: ${{ secrets.STATE_ACCOUNT }}
  JETPACK_RPM: "${{ secrets.JETPACK_RPM }}"
  CYCLECLOUD_RPM: "${{ secrets.CYCLECLOUD_RPM }}"
  ANSIBLE_VERBOSITY: 2 # From 0 to 4 based on the level of logs needed in Ansible

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    outputs:
        resource_group: ${{ steps.deploy.outputs.resource_group }}

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
          echo "local user: $(whoami)"

      - name: Deployment
        id: deploy
        run: |

          set -e
          UUID="$(cat /proc/sys/kernel/random/uuid | tr -d '\n-' | tr '[:upper:]' '[:lower:]' | cut -c 1-6)"
          RESOURCE_GROUP="azhop_$UUID"
          echo "::set-output name=RESOURCE_GROUP::$RESOURCE_GROUP"
          
          sed "s/__RESOURCE_GROUP__/$RESOURCE_GROUP/g" $AZHOP_CONFIGURATION > config.yml

          cat config.yml
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }}

          ls -al 
          cat config.yml

          set +e
          build_error=0
          ./build.sh -a apply -f ./tf
          build_error=$?
          ./azhop_state.sh upload ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }}
          set -e
          ./create_passwords.sh
          exit $build_error

  ad:
    name: ad
    runs-on: ubuntu-latest
    needs: deploy

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ad
          ./install.sh linux
          ./install.sh add_users

  lustre:
    name: lustre
    runs-on: ubuntu-latest
    needs: [ad, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh lustre

  ood:
    name: ood
    runs-on: ubuntu-latest
    needs: [ad, lustre, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ood

  grafana:
    name: grafana
    runs-on: ubuntu-latest
    needs: [ad, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh grafana

  cycle:
    name: cycle
    runs-on: ubuntu-latest
    needs: [ad, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ccportal
          ./install.sh ccpbs
          ./install.sh scheduler

  telegraf:
    name: telegraf
    runs-on: ubuntu-latest
    needs: [ad, grafana, lustre, ood, cycle, deploy]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install applications
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh telegraf

  build_image:
    name: build_image
    runs-on: ubuntu-latest
    needs: deploy
    strategy: 
      matrix:
        packer_file: ["azhop-centos78-v2-rdma.json", "centos-7.8-desktop-3d.json", "azhop-centos79-v2-rdma-gpgpu.json"]
    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Build Images
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          cd packer
          ./build_image.sh -i ${{matrix.packer_file}}

  set_image:
    name: set_image
    runs-on: ubuntu-latest
    needs: [cycle, deploy, build_image]
    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Update Cycle to use the latest images
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ./install.sh ccpbs

  run_tests:
    name: run_tests
    runs-on: ubuntu-latest
    needs: [deploy, set_image]
    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
         
      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Run test playbook
        run: |
          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          ansible-playbook -v -i playbooks/inventory ./playbooks/tests.yml 

  cleanup:
    name: cleanup
    runs-on: ubuntu-latest
    if: always() && github.event.inputs.clean == 'true'
    needs: [deploy, run_tests]

    container:
      image: xpillons/hpcrover:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v2.3.4

      - name: Login azure
        run: |
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Cleanup
        run: |

          RESOURCE_GROUP=${{needs.deploy.outputs.resource_group}}
          rg_exists=$(az group exists -n $RESOURCE_GROUP)
          if [ "$rg_exists" = "true" ]; then
            echo "removing resource group $RESOURCE_GROUP"
            az group delete -n $RESOURCE_GROUP -y
            ./azhop_state.sh delete ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          fi