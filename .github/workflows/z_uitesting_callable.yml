name : UITest Callable Workflow

on:
  workflow_call:
    inputs:
      resource_group:
        description: 'Name of the resource group to test the environment deployed in'
        required: true
        type: string
      # users:
      #   description: 'Number of the users to test the environment deployed in'
      #   required: false
      #   type: string
      #   default: 1
      # scenarios:
      #   description: 'Scenarios to be tested - default is all'
      #   required: false
      #   type: string
      #   default: "*"

    secrets:
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true

env:
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZHOP_STATE_CONTAINER: environments
  AZHOP_STATE_ACCOUNT: azhopstates

defaults:
  run:
    shell: bash

jobs:
  # init_matrix:
  #   runs-on: self-hosted
  #   name: init_matrix
  #   container:
  #     image: azhop.azurecr.io/hpcrover:latest
  #     credentials:
  #       username: ${{ env.ARM_CLIENT_ID }}
  #       password: ${{ env.ARM_CLIENT_SECRET }}
  #     options: --user 0
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Login azure
  #       run: |
  #         source /miniconda/bin/activate
  #         az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
  #         az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
  #         echo "local user: $(whoami)"
  #     - name: Download azhop states
  #       run: |
  #         source /miniconda/bin/activate
  #         RESOURCE_GROUP=${{ inputs.resource_group }}
  #         echo "Resource group name is $RESOURCE_GROUP"
  #         ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
  #         cat config.yml
  #     - name: Built a matrix with users
  #       id: set-matrix
  #       run: |
  #         source /miniconda/bin/activate
  #         set -x
  #         users=$(yq '.users[].name' config.yml | head -n ${{ inputs.users }} | jq -cRn '[inputs]')
  #         echo "matrix=$users" >> $GITHUB_OUTPUT
  #   outputs:
  #     matrix: ${{ steps.set-matrix.outputs.matrix }}

  ui_tests:
    name: ui_tests
    runs-on: self-hosted
    permissions:
      contents: read
    # needs: [init_matrix]
    # strategy: 
    #   matrix:
    #     users: ${{ fromJson(needs.init_matrix.outputs.matrix) }}
    #   fail-fast: false

    timeout-minutes: 60

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: '16.x'
      - name: Install dependencies
        run: |
          apt-get update
          apt install npm -y
      - name: Install Playwright
        run: | 
          npm install -D @playwright/test
          npm install js-yaml
          npx playwright install --with-deps
      - name: Login azure
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
          echo "local user: $(whoami)"
      - name: Download azhop states
        run: |
          source /miniconda/bin/activate
          RESOURCE_GROUP=${{ inputs.resource_group }}
          echo "Resource group name is $RESOURCE_GROUP"
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP
          cat config.yml
      - name: Execute tests
        run: |
          source /miniconda/bin/activate
          # Add a random delay
          # wait_time=$((RANDOM % 10))
          # sleep ${wait_time}s
          ./run_ui_tests.sh # ${{ matrix.users }} ${{ inputs.scenarios }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ inputs.resource_group }}
          path: test-results/
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ inputs.resource_group }}
          path: playwright-report/
