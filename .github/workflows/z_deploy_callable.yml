name : Deploy Callable Workflow

on:
  workflow_call:
    inputs:
      resource_group:
        description: 'Resource group name'
        required: true
        type: string
      deploy_with:
        description: 'Method used for the deployment - tf, bicep or arm - Default to bicep'
        required: false
        default: 'bicep' # use it with ${{ inputs.deploy_with }}
        type: string
  
    secrets:
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true

env:
  TF_CLI_ARGS: '-no-color'
  TF_CLI_ARGS_destroy: '-auto-approve -refresh=false'
  TF_CLI_ARGS_apply: '-auto-approve'
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZHOP_STATE_CONTAINER: environments
  AZHOP_STATE_ACCOUNT: azhopstates


defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: deploy
    runs-on: self-hosted
    permissions:
      contents: read
    timeout-minutes: 80

    container:
      image: azhop.azurecr.io/hpcrover:latest
      credentials:
        username: ${{ env.ARM_CLIENT_ID }}
        password: ${{ env.ARM_CLIENT_SECRET }}
      options: --user 0

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Login azure
        run: |
          source /miniconda/bin/activate
          az login --service-principal -u '${{ env.ARM_CLIENT_ID }}' -p '${{ env.ARM_CLIENT_SECRET }}' --tenant '${{ env.ARM_TENANT_ID }}'
          az account set -s  ${{ env.ARM_SUBSCRIPTION_ID }}
          echo "local user: $(whoami)"

      - name: Deployment
        id: deploy
        run: |
          set -e
          source /miniconda/bin/activate

          RESOURCE_GROUP="${{ inputs.resource_group }}"
          echo "Download state files for $RESOURCE_GROUP"
          ./azhop_state.sh download ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }} $RESOURCE_GROUP

          set +e
          ./build.sh -a apply -l ${{ inputs.deploy_with }}
          build_error=$?
          set -e
          ./azhop_state.sh upload ${{ env.AZHOP_STATE_ACCOUNT }} ${{ env.AZHOP_STATE_CONTAINER }}
          ./create_passwords.sh
          exit $build_error