{% for vm_name, vm in vms.items() %}
  {%- if 'identity' in vm %}
resource {{ vm_name | replace('-', '_') }}ManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30' = {
  name: '{{ vm_name }}-mi'
  location: location
}
    {%- if 'roles' in vm.identity %}
      {%- for role in vm.identity.roles %}
var {{ vm_name }}{{ role | replace('-', '_') }}Id = resourceId('microsoft.authorization/roleDefinitions', '{{ role }}')
var {{ vm_name }}{{ role | replace('-', '_') }}Ra = guid({{ vm_name }}ManagedIdentity.name, {{ vm_name }}{{ role | replace('-', '_')}}Id, subscription().id)
resource {{ vm_name | replace('-', '_') }}ManagedIdentity{{ role | replace('-', '_')}} 'Microsoft.Authorization/roleAssignments@2020-04-01-preview' = {
  name: {{ vm_name }}{{ role | replace('-', '_')}}Ra
  scope: resourceGroup()
  properties: {
    roleDefinitionId: {{ vm_name }}{{ role | replace('-', '_')}}Id
    principalId: {{ vm_name }}ManagedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}
      {%- endfor %}
    {%- endif %}
  {%- endif %}


  {% for idx in range(1, vm.get('count', 1)+1) %}
    {%- if 'count' in vm %}
      {%- set vmname = vm_name ~ '-' ~ idx %}
    {%- else %}
      {%- set vmname = vm_name %}
    {%- endif %}

output {{ vmname | replace('-', '_') }}_private_ip string = {{ vmname | replace('-', '_') }}Nic.properties.ipConfigurations[0].properties.privateIPAddress

resource {{ vmname | replace('-', '_') }}Nic 'Microsoft.Network/networkInterfaces@2020-06-01' = {
  name: '{{ vmname }}-nic'
  location: location
  properties: {
    ipConfigurations: [
      {
        name: '{{ vmname }}-ipconfig'
        properties: {
          applicationSecurityGroups: [
    {%- for asg in vm.asgs %}
            {
              id: {{ asg | replace('-', '_') }}.id
            }
    {%- endfor %}
          ]
          subnet: {
            id: {{ vm.subnet }}Subnet.id
          }
          privateIPAllocationMethod: 'Dynamic'
  {%- if 'pip' in vm and vm.pip == true %}
          publicIPAddress: {
            id: {{ vmname | replace('-', '_') }}Pip.id
          }
  {%- endif %}
        }
      }
    ]
  }
}

    {%- if 'pip' in vm and vm.pip == true %}
resource {{ vmname | replace('-', '_') }}Pip 'Microsoft.Network/publicIPAddresses@2021-05-01' = {
  name: '{{ vmname }}-pip'
  location: location
  sku: {
    name: 'Basic'
  }
  properties: {
    publicIPAllocationMethod: 'Dynamic'
    publicIPAddressVersion: 'IPv4'
    idleTimeoutInMinutes: 4
    dnsSettings: {
      domainNameLabel : '{{ vmname | replace('-', '_')}}${resourcePostfix}'
    }
  }
}
output {{ vmname | replace('-', '_') }}_fqdn string = {{ vmname | replace('-', '_') }}Pip.properties.dnsSettings.fqdn

    {%- endif %}

resource {{ vmname | replace('-', '_') }}Vm 'Microsoft.Compute/virtualMachines@2020-06-01' = {
  name: '{{ vmname }}'
  location: location
      {%- if 'plan' in images[vm.image] and images[vm.image].plan == true %}
  plan: {
    publisher: '{{ images[vm.image].publisher }}'
    product: '{{ images[vm.image].offer }}'
    name: '{{ images[vm.image].sku }}'
  }
    {%- endif %}
    {%- if 'identity' in vm %}
  identity: {
    type: 'UserAssigned'
    userAssignedIdentities: {
      '${ {{ vm_name | replace('-', '_') }}ManagedIdentity.id}': {}
    }
  }
    {%- endif %}  
  properties: {
    hardwareProfile: {
      vmSize: '{{ vm.sku }}'
    }
    storageProfile: {
    {%- if 'datadisks' in vm %}
      dataDisks: [
      {%- for disk in vm.datadisks %}
        {
          name: '{{ disk.name }}'
          managedDisk: {
            storageAccountType: '{{ disk.disksku }}'
          }
          diskSizeGB: {{ disk.size }}
        {%- if 'caching' in disk %}
          caching: '{{ disk.caching }}'
        {%- endif %}
          lun: {{ loop.index0 }}
          createOption: 'Empty'
        }
      {%- endfor %}
      ]
    {%- endif %}
      osDisk: {
        createOption: 'FromImage'
        managedDisk: {
          storageAccountType: '{{ vm.osdisksku }}'
        }
    {%- if 'osdisksize' in vm %}
        diskSizeGB: {{ vm.osdisksize }}
    {%- endif %}
        caching: 'ReadWrite'
      }
      imageReference: {
        publisher: '{{ images[vm.image].publisher }}'
        offer: '{{ images[vm.image].offer }}'
        sku: '{{ images[vm.image].sku }}'
        version: '{{ images[vm.image].version }}'
      }
    }
    networkProfile: {
      networkInterfaces: [
        {
          id: {{ vmname | replace('-', '_') }}Nic.id
        }
      ]
    }
    osProfile: {
      computerName: '{{ vmname }}'
      adminUsername: adminUser
    {%- if 'run_deploy_script' in vm and vm.run_deploy_script == true %}
      customData: base64(replace(loadTextContent('resources/install.sh'), '__INSERT_CONFIG_FILE__', loadTextContent('build.yml')))
    {%- endif %}
    {%- if 'windows' in vm and vm.windows == true %}
      adminPassword: adminPassword
      windowsConfiguration: {
        winRM: {
          listeners: [
            {
              protocol: 'Http'
            }
          ]
        }
      }
    {%- else %}
      linuxConfiguration: {
        disablePasswordAuthentication: true
        ssh: {
          publicKeys: [
            {
              path: '/home/${adminUser}/.ssh/authorized_keys'
              keyData: adminSshPublicKey
            }
          ]
        }
      }
    {%- endif %}
    }
    {%- if 'ahub' in vm and vm.ahub == true %}
    licenseType: 'Windows_Server'
    {%- endif %}
  }
}
  {%- endfor %}
{%- endfor %}
